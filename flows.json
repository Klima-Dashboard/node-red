[
  {
    "id": "f77cecfdede2b6b4",
    "type": "tab",
    "label": "Statistisches Bundesamt (Destatis)",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "fa58c9720b7dafef",
    "type": "tab",
    "label": "Regionaldatenbank (Statistische Ämter des Bundes und der Länder)",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "46db4230f8090425",
    "type": "tab",
    "label": "Flaechennutzung",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "64a0d85e0a9de25b",
    "type": "tab",
    "label": "Flächenversiegelung: Erhebung über Biotreibstoffe",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "153a349f98190ee9",
    "type": "tab",
    "label": "OpenSenseMap",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "740c14ecbd33260d",
    "type": "tab",
    "label": "Feinstaub-Daten",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "96b765fa43a7bae6",
    "type": "tab",
    "label": "DWD",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "262c15f3e20fedc2",
    "type": "tab",
    "label": "Grundwassermessstellen - GOK",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "a8bf5810905e996f",
    "type": "tab",
    "label": "E-Mobilität, Ladestationen im Fläming",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "f9b3b25533ec7975",
    "type": "tab",
    "label": "Energiesteckbriefe",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "3905b1242c272069",
    "type": "tab",
    "label": "Windkraftanlagen in BB",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "d04948c7acfc2e3d",
    "type": "tab",
    "label": "Waldzustandsbericht",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "7abb33e2da2b104c",
    "type": "tab",
    "label": "ttn",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "75d3c8ce1dd7c84a",
    "type": "tab",
    "label": "ttn-sensoren",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "5b4e21c375d11aac",
    "type": "tab",
    "label": "ttn-test",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "d289ded41d25fe0f",
    "type": "tab",
    "label": "Klimadashboard.at",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "cb2c713d4de88053",
    "type": "tab",
    "label": "Pegelstand",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "a07113881d05f3cb",
    "type": "tab",
    "label": "Forst Brandenburg - Klimadaten Weitzgrund",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "716bc332ba89f052",
    "type": "tab",
    "label": "Sensor Community",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "84615457a8c44f90",
    "type": "tab",
    "label": "DWD Phänologie",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "0e4f8ac41740aed5",
    "type": "tab",
    "label": "Statistik Berlin-Brandenburg",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "f7c51ad7e86d6764",
    "type": "tab",
    "label": "Heartbeat-Monitoring",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "af4e5c9d85dc4b89",
    "type": "influxdb",
    "hostname": "127.0.0.1",
    "port": "8086",
    "protocol": "http",
    "database": "database",
    "name": "InfluxDB Bad Belzig",
    "usetls": false,
    "tls": "",
    "influxdbVersion": "2.0",
    "url": "https://influxdb.bad-belzig.klima-daten.de",
    "rejectUnauthorized": false
  },
  {
    "id": "9348e35b70672bec",
    "type": "influxdb",
    "hostname": "127.0.0.1",
    "port": "8086",
    "protocol": "http",
    "database": "database",
    "name": "ttn",
    "usetls": false,
    "tls": "",
    "influxdbVersion": "2.0",
    "url": "https://influxdb.bad-belzig.klima-daten.de",
    "rejectUnauthorized": true
  },
  {
    "id": "46469723.30c598",
    "type": "tls-config",
    "name": "",
    "cert": "",
    "key": "",
    "ca": "",
    "certname": "",
    "keyname": "",
    "caname": "",
    "verifyservercert": true
  },
  {
    "id": "dc63934af35c8879",
    "type": "mqtt-broker",
    "z": "7abb33e2da2b104c",
    "name": "ttn-draguino",
    "broker": "eu1.cloud.thethings.network",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "3",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "fb56bec2827ceb7f",
    "type": "mqtt-broker",
    "z": "7abb33e2da2b104c",
    "name": "miniUNI",
    "broker": "eu1.cloud.thethings.network",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "3",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "d0ef26dd03a08b6b",
    "type": "influxdb",
    "hostname": "127.0.0.1",
    "port": "8086",
    "protocol": "http",
    "database": "database",
    "name": "Pegelstand",
    "usetls": false,
    "tls": "46469723.30c598",
    "influxdbVersion": "2.0",
    "url": "http://localhost:8086",
    "rejectUnauthorized": true
  },
  {
    "id": "b5548ac68b9cabfc",
    "type": "mqtt-broker",
    "z": "cb2c713d4de88053",
    "name": "Pegelstand",
    "broker": "eu1.cloud.thethings.network",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "3",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "c99d98fdebee0ee0",
    "type": "mqtt-broker",
    "z": "7abb33e2da2b104c",
    "name": "fredersdorf-flaeming",
    "broker": "eu1.cloud.thethings.network:1883",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "3",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "702eb618aab07ca7",
    "type": "mqtt-broker",
    "z": "7abb33e2da2b104c",
    "name": "flaemingdragino1",
    "broker": "eu1.cloud.thethings.network",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "3",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "1c53767ae41cc248",
    "type": "mqtt-broker",
    "z": "5b4e21c375d11aac",
    "name": "Dynamic flaemingdragino1",
    "broker": "eu1.cloud.thethings.network",
    "port": "1883",
    "clientid": "",
    "autoConnect": false,
    "usetls": false,
    "protocolVersion": "3",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "6f07bbbf89d995c1",
    "type": "inject",
    "z": "f77cecfdede2b6b4",
    "name": "33111-0002 Bodenflaeche",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "genesis_name",
        "v": "33111-0002",
        "vt": "str"
      },
      {
        "p": "startyear",
        "v": "2000",
        "vt": "str"
      },
      {
        "p": "measurement",
        "v": "Flaechennutzung",
        "vt": "str"
      },
      {
        "p": "field_key",
        "v": "FLC005__Bodenflaeche__qkm",
        "vt": "str"
      },
      {
        "p": "field",
        "v": "Bodenflaeche__qkm",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 04 * * 1,2,3,4,5",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 100,
    "wires": [["6ac9b6f5dd5da0fa"]]
  },
  {
    "id": "b114c0f75af7429d",
    "type": "http request",
    "z": "f77cecfdede2b6b4",
    "name": "Abfrage Genesis",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://www-genesis.destatis.de/genesisWS/rest/2020/data/tablefile?username={{genesis_username}}&password={{genesis_password}}&name={{genesis_name}}&area=all&compress=false&transpose=false&startyear={{startyear}}&endyear&timeslices&regionalvariable&regionalkey&classifyingvariable1&classifyingkey1&classifyingvariable2&classifyingkey2&classifyingvariable3&classifyingkey3&format={{genesis_format}}&job=false&stand=&language=de",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 650,
    "y": 140,
    "wires": [["5b9b316ce08547a5", "33b1a70a16839460"]]
  },
  {
    "id": "5b9b316ce08547a5",
    "type": "debug",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 870,
    "y": 140,
    "wires": []
  },
  {
    "id": "33b1a70a16839460",
    "type": "csv",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "all",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": false,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 110,
    "y": 440,
    "wires": [["2f080c52e798a14e", "e2cfc262225b9608"]]
  },
  {
    "id": "2f080c52e798a14e",
    "type": "debug",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 870,
    "y": 440,
    "wires": []
  },
  {
    "id": "26911ac6c2e7cc89",
    "type": "debug",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 870,
    "y": 520,
    "wires": []
  },
  {
    "id": "a1466579d7076a7b",
    "type": "influxdb batch",
    "z": "f77cecfdede2b6b4",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Destatis",
    "x": 880,
    "y": 600,
    "wires": []
  },
  {
    "id": "ea793b06484562bc",
    "type": "catch",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 120,
    "y": 740,
    "wires": [["ea9764d25095c039"]]
  },
  {
    "id": "024d8d24cf0b5354",
    "type": "influxdb batch",
    "z": "f77cecfdede2b6b4",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 610,
    "y": 740,
    "wires": []
  },
  {
    "id": "ea9764d25095c039",
    "type": "function",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Destatis\",\n    fields: {\n        bucket: \"Destatis\",\n        flow: \"Statistisches Bundesamt (Destatis)\",\n        error_message: msg.error.message,\n        genesis_name: msg.genesis_name,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n        genesis_name: msg.genesis_name\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 740,
    "wires": [["822581b15e0690c6", "024d8d24cf0b5354"]]
  },
  {
    "id": "822581b15e0690c6",
    "type": "debug",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 780,
    "wires": []
  },
  {
    "id": "cb7308ae66607ee3",
    "type": "comment",
    "z": "f77cecfdede2b6b4",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 140,
    "y": 700,
    "wires": []
  },
  {
    "id": "6ac9b6f5dd5da0fa",
    "type": "function",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "func": "msg.genesis_username = \"DE09EKT5VR\";\nmsg.genesis_password = \"_REPLACED_\";\nmsg.genesis_format = \"ffcsv\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 140,
    "wires": [["b114c0f75af7429d"]]
  },
  {
    "id": "e2cfc262225b9608",
    "type": "function",
    "z": "f77cecfdede2b6b4",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\nconst isYear = (str) => {\n    // Regex pattern to match exactly four digits\n    const regex = /^\\d{4}$/;\n    return regex.test(str);\n}\n\n// transform data with adding measurement and timestamp\nmsg.payload.forEach(item => {\n    let timestamp = new Date()\n\n    if (isYear(item.Zeit)) {\n        const year = item.Zeit\n\n        // Get the timestamp from a new Date object with the year\n        timestamp = new Date(year, 0, 1).valueOf()\n    } else {\n        // Input German date: \"31.12.2021\"\n        const germanDate = item.Zeit;\n\n        // Split the date into day, month, and year components\n        const [day, month, year] = germanDate.split(\".\");\n\n        // Get the timestamp from a new Date object with the parsed\n        // components (Note: month - 1 because months are zero-indexed)\n        timestamp = new Date(year, month - 1, day).valueOf()\n    }\n\n    const value = !isNaN(item[msg.field_key]) ? parseFloat(item[msg.field_key].replace(\",\", \".\")) : null\n\n    const s = {\n        fields: {\n            [item[\"1_Merkmal_Label\"]]: item[\"1_Auspraegung_Label\"],\n            [item[\"2_Merkmal_Label\"]]: item[\"2_Auspraegung_Label\"].trim(),\n            [msg.field]: value\n        },\n        tags: {\n            [item[\"1_Merkmal_Label\"]]: item[\"1_Auspraegung_Label\"],\n            [item[\"1_Merkmal_Code\"]]: item[\"1_Auspraegung_Code\"],\n            [item[\"2_Merkmal_Label\"]]: item[\"2_Auspraegung_Label\"].trim(),\n            \"Genesis_Statistik_Code\": item.Statistik_Code,\n            \"Genesis_Statistik_Label\": item.Statistik_Label,\n            \"Genesis_Name\": msg.genesis_name\n        },\n        measurement,\n        timestamp\n    }\n    data_to_return.push(s)\n})\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 470,
    "y": 500,
    "wires": [["26911ac6c2e7cc89", "a1466579d7076a7b", "2b2a56d17683f076"]]
  },
  {
    "id": "e2c31da5727ee007",
    "type": "link out",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 995,
    "y": 740,
    "wires": []
  },
  {
    "id": "307aa9ef9bf9d0b0",
    "type": "comment",
    "z": "f77cecfdede2b6b4",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 940,
    "y": 700,
    "wires": []
  },
  {
    "id": "2b2a56d17683f076",
    "type": "function",
    "z": "f77cecfdede2b6b4",
    "name": "",
    "func": "msg.bucket = \"Destatis\"\nmsg.flow = \"Statistisches Bundesamt (Destatis)\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 900,
    "y": 740,
    "wires": [["e2c31da5727ee007"]]
  },
  {
    "id": "313acb4ba4e64245",
    "type": "inject",
    "z": "fa58c9720b7dafef",
    "name": "41141-02-02-4 Fläche",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "genesis_name",
        "v": "41141-02-02-4",
        "vt": "str"
      },
      {
        "p": "startyear",
        "v": "2016",
        "vt": "str"
      },
      {
        "p": "measurement",
        "v": "Betriebe",
        "vt": "str"
      },
      {
        "p": "field_key",
        "v": "FLC004__Flaeche__ha",
        "vt": "str"
      },
      {
        "p": "field",
        "v": "Flaeche__ha",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 04 * * 1,2,3,4,5",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 190,
    "y": 140,
    "wires": [["91d8d26bec2ed40d"]]
  },
  {
    "id": "bff0982748d1cf50",
    "type": "http request",
    "z": "fa58c9720b7dafef",
    "name": "Abfrage Genesis",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://www.regionalstatistik.de/genesisws/rest/2020/data/tablefile?username={{genesis_username}}&password={{genesis_password}}&name={{genesis_name}}&area=all&compress=false&transpose=false&startyear={{startyear}}&endyear&timeslices&regionalvariable&regionalkey={{regionalkey}}&classifyingvariable1&classifyingkey1&classifyingvariable2&classifyingkey2&classifyingvariable3&classifyingkey3&format={{genesis_format}}&job=false&stand=&language=de",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 770,
    "y": 140,
    "wires": [["281ab703fdaa84d4", "0184f5c15023e2dd"]]
  },
  {
    "id": "281ab703fdaa84d4",
    "type": "debug",
    "z": "fa58c9720b7dafef",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 990,
    "y": 140,
    "wires": []
  },
  {
    "id": "0184f5c15023e2dd",
    "type": "csv",
    "z": "fa58c9720b7dafef",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "all",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": false,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 130,
    "y": 660,
    "wires": [["aac82de16261902b", "d2a66743f358f194"]]
  },
  {
    "id": "aac82de16261902b",
    "type": "debug",
    "z": "fa58c9720b7dafef",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1010,
    "y": 660,
    "wires": []
  },
  {
    "id": "86d5c542f50c6da5",
    "type": "debug",
    "z": "fa58c9720b7dafef",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1010,
    "y": 760,
    "wires": []
  },
  {
    "id": "d2a66743f358f194",
    "type": "function",
    "z": "fa58c9720b7dafef",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\nconst isYear = (str) => {\n    // Regex pattern to match exactly four digits\n    const regex = /^\\d{4}$/;\n    return regex.test(str);\n}\n\n// transform data with adding measurement and timestamp\nmsg.payload.forEach(item => {\n    let timestamp = new Date()\n\n    if (isYear(item.Zeit)) {\n        const year = item.Zeit\n\n        // Get the timestamp from a new Date object with the year\n        timestamp = new Date(year, 0, 1).valueOf()\n    } else {\n        // Input German date: \"31.12.2021\"\n        const germanDate = item.Zeit;\n\n        // Split the date into day, month, and year components\n        const [day, month, year] = germanDate.split(\".\");\n\n        // Get the timestamp from a new Date object with the parsed\n        // components (Note: month - 1 because months are zero-indexed)\n        timestamp = new Date(year, month - 1, day).valueOf()\n    }\n\n    const value = !isNaN(item[msg.field_key]) ? parseFloat(item[msg.field_key].replace(\",\", \".\")) : null\n\n    const s = {\n        fields: {\n            [item[\"1_Merkmal_Label\"]]: item[\"1_Auspraegung_Label\"],\n            [item[\"2_Merkmal_Label\"]]: item[\"2_Auspraegung_Label\"].trim(),\n            [msg.field]: value\n        },\n        tags: {\n            [item[\"1_Merkmal_Label\"]]: item[\"1_Auspraegung_Label\"],\n            [item[\"1_Merkmal_Code\"]]: item[\"1_Auspraegung_Code\"],\n            [item[\"2_Merkmal_Label\"]]: item[\"2_Auspraegung_Label\"].trim(),\n            \"Genesis_Statistik_Code\": item.Statistik_Code,\n            \"Genesis_Statistik_Label\": item.Statistik_Label,\n            \"Genesis_Name\": msg.genesis_name\n        },\n        measurement,\n        timestamp\n    }\n    data_to_return.push(s)\n})\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 720,
    "wires": [["86d5c542f50c6da5", "24e7a0412dd8809e", "f3f7b86970e6dd12"]]
  },
  {
    "id": "24e7a0412dd8809e",
    "type": "influxdb batch",
    "z": "fa58c9720b7dafef",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Regionaldatenbank",
    "x": 1020,
    "y": 860,
    "wires": []
  },
  {
    "id": "7fc9cfa91f1f56ca",
    "type": "inject",
    "z": "fa58c9720b7dafef",
    "name": "33111-02-01-5-B Potsdam-Mittelmark",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "genesis_name",
        "v": "33111-02-01-5-B",
        "vt": "str"
      },
      {
        "p": "startyear",
        "v": "2000",
        "vt": "str"
      },
      {
        "p": "measurement",
        "v": "Flaechennutzung",
        "vt": "str"
      },
      {
        "p": "field_key",
        "v": "FLC005__Bodenflaeche__ha",
        "vt": "str"
      },
      {
        "p": "field",
        "v": "Bodenflaeche__ha",
        "vt": "str"
      },
      {
        "p": "regionalkey",
        "v": "12069*",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 04 * * 1,2,3,4,5",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 240,
    "y": 260,
    "wires": [["91d8d26bec2ed40d"]]
  },
  {
    "id": "91d8d26bec2ed40d",
    "type": "function",
    "z": "fa58c9720b7dafef",
    "name": "",
    "func": "msg.genesis_username = \"RE009479\";\nmsg.genesis_password = \"_REPLACED_\";\nmsg.genesis_format = \"ffcsv\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 480,
    "y": 140,
    "wires": [["bff0982748d1cf50"]]
  },
  {
    "id": "7b22ff43e74a7146",
    "type": "inject",
    "z": "fa58c9720b7dafef",
    "name": "41141-03-02-4 Betriebe",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "genesis_name",
        "v": "41141-03-02-4",
        "vt": "str"
      },
      {
        "p": "startyear",
        "v": "2016",
        "vt": "str"
      },
      {
        "p": "measurement",
        "v": "Betriebe",
        "vt": "str"
      },
      {
        "p": "field_key",
        "v": "BTR034__Betriebe__Anzahl",
        "vt": "str"
      },
      {
        "p": "field",
        "v": "Betriebe__Anzahl",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 04 * * 1,2,3,4,5",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 190,
    "y": 180,
    "wires": [["91d8d26bec2ed40d"]]
  },
  {
    "id": "78c107669ce435f6",
    "type": "inject",
    "z": "fa58c9720b7dafef",
    "name": "41141-01-01-4 Landwirtschaftliche Betriebe",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "genesis_name",
        "v": "41141-01-01-4",
        "vt": "str"
      },
      {
        "p": "startyear",
        "v": "2016",
        "vt": "str"
      },
      {
        "p": "measurement",
        "v": "Betriebe",
        "vt": "str"
      },
      {
        "p": "field_key",
        "v": "BTR010__Landwirtschaftliche_Betriebe__Anzahl",
        "vt": "str"
      },
      {
        "p": "field",
        "v": "Landwirtschaftliche_Betriebe__Anzahl",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 04 * * 1,2,3,4,5",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 250,
    "y": 60,
    "wires": [["91d8d26bec2ed40d"]]
  },
  {
    "id": "014c7ff103633127",
    "type": "inject",
    "z": "fa58c9720b7dafef",
    "name": "41141-03-02-4 Tiere",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "genesis_name",
        "v": "41141-03-02-4",
        "vt": "str"
      },
      {
        "p": "startyear",
        "v": "2016",
        "vt": "str"
      },
      {
        "p": "measurement",
        "v": "Betriebe",
        "vt": "str"
      },
      {
        "p": "field_key",
        "v": "TIE003__Tiere__Anzahl",
        "vt": "str"
      },
      {
        "p": "field",
        "v": "Tiere__Anzahl",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 04 * * 1,2,3,4,5",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 220,
    "wires": [["91d8d26bec2ed40d"]]
  },
  {
    "id": "32044b50d1287059",
    "type": "inject",
    "z": "fa58c9720b7dafef",
    "name": "41141-01-01-4 Fläche",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "genesis_name",
        "v": "41141-01-01-4",
        "vt": "str"
      },
      {
        "p": "startyear",
        "v": "2016",
        "vt": "str"
      },
      {
        "p": "measurement",
        "v": "Betriebe",
        "vt": "str"
      },
      {
        "p": "field_key",
        "v": "FLC004__Flaeche__ha",
        "vt": "str"
      },
      {
        "p": "field",
        "v": "Flaeche__ha",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 04 * * 1,2,3,4,5",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 190,
    "y": 100,
    "wires": [["91d8d26bec2ed40d"]]
  },
  {
    "id": "47b6629be81c0e48",
    "type": "catch",
    "z": "fa58c9720b7dafef",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 120,
    "y": 1080,
    "wires": [["fcb342857d86fd87"]]
  },
  {
    "id": "29562840e0b22e61",
    "type": "influxdb batch",
    "z": "fa58c9720b7dafef",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 610,
    "y": 1080,
    "wires": []
  },
  {
    "id": "fcb342857d86fd87",
    "type": "function",
    "z": "fa58c9720b7dafef",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Regionaldatenbank\",\n    fields: {\n        bucket: \"Regionaldatenbank\",\n        flow: \"Regionaldatenbank (Statistische Ämter des Bundes und der Länder)\",\n        error_message: msg.error.message,\n        genesis_name: msg.genesis_name,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n        genesis_name: msg.genesis_name\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 1080,
    "wires": [["29562840e0b22e61", "10aed8ded2b0db5c"]]
  },
  {
    "id": "10aed8ded2b0db5c",
    "type": "debug",
    "z": "fa58c9720b7dafef",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 1120,
    "wires": []
  },
  {
    "id": "1f6e836d49562e44",
    "type": "comment",
    "z": "fa58c9720b7dafef",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 140,
    "y": 1040,
    "wires": []
  },
  {
    "id": "e906b7f1f301d786",
    "type": "link out",
    "z": "fa58c9720b7dafef",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1105,
    "y": 1080,
    "wires": []
  },
  {
    "id": "6b109f717021d964",
    "type": "comment",
    "z": "fa58c9720b7dafef",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1050,
    "y": 1040,
    "wires": []
  },
  {
    "id": "f3f7b86970e6dd12",
    "type": "function",
    "z": "fa58c9720b7dafef",
    "name": "",
    "func": "msg.bucket = \"Regionaldatenbank\"\nmsg.flow = \"Regionaldatenbank (Statistische Ämter des Bundes und der Länder)\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1010,
    "y": 1080,
    "wires": [["e906b7f1f301d786"]]
  },
  {
    "id": "9b593be0a64b90d8",
    "type": "csv",
    "z": "46db4230f8090425",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "all",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": false,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 130,
    "y": 120,
    "wires": [["f2ef2e4d42d61c04", "465a780b3da03913"]]
  },
  {
    "id": "fc7b5cbf5dd85ebd",
    "type": "debug",
    "z": "46db4230f8090425",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 890,
    "y": 240,
    "wires": []
  },
  {
    "id": "f2ef2e4d42d61c04",
    "type": "debug",
    "z": "46db4230f8090425",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 870,
    "y": 120,
    "wires": []
  },
  {
    "id": "12bbf554fa563939",
    "type": "influxdb batch",
    "z": "46db4230f8090425",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "landusage",
    "x": 930,
    "y": 320,
    "wires": []
  },
  {
    "id": "564a9ca2b015df4a",
    "type": "catch",
    "z": "46db4230f8090425",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 120,
    "y": 500,
    "wires": [["3caf09a91131d26c"]]
  },
  {
    "id": "a1f7c4124845e7c0",
    "type": "influxdb batch",
    "z": "46db4230f8090425",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 610,
    "y": 500,
    "wires": []
  },
  {
    "id": "3caf09a91131d26c",
    "type": "function",
    "z": "46db4230f8090425",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"landusage\",\n    fields: {\n        bucket: \"landusage\",\n        flow: \"Flaechennutzung\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 500,
    "wires": [["abe63384ce2bd170", "a1f7c4124845e7c0"]]
  },
  {
    "id": "abe63384ce2bd170",
    "type": "debug",
    "z": "46db4230f8090425",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 540,
    "wires": []
  },
  {
    "id": "9e7c173a299c72fa",
    "type": "comment",
    "z": "46db4230f8090425",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 140,
    "y": 460,
    "wires": []
  },
  {
    "id": "d9f368cbba60f09e",
    "type": "link out",
    "z": "46db4230f8090425",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1005,
    "y": 500,
    "wires": []
  },
  {
    "id": "39608ded269ffc07",
    "type": "comment",
    "z": "46db4230f8090425",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 950,
    "y": 460,
    "wires": []
  },
  {
    "id": "e515c5a823f5b8e2",
    "type": "function",
    "z": "46db4230f8090425",
    "name": "",
    "func": "msg.bucket = \"landusage\"\nmsg.flow = \"Flaechennutzung\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 910,
    "y": 500,
    "wires": [["d9f368cbba60f09e"]]
  },
  {
    "id": "295612f00ecffbe6",
    "type": "inject",
    "z": "46db4230f8090425",
    "name": "AI001-2-5",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "genesis_name",
        "v": "AI001-2-5",
        "vt": "str"
      },
      {
        "p": "startyear",
        "v": "2000",
        "vt": "str"
      },
      {
        "p": "measurement",
        "v": "Flaechennutzung",
        "vt": "str"
      },
      {
        "p": "regionalkey",
        "v": "12069*",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 04 * * 1,2,3,4,5",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 40,
    "wires": [["6056745795bff048"]]
  },
  {
    "id": "6056745795bff048",
    "type": "function",
    "z": "46db4230f8090425",
    "name": "",
    "func": "msg.genesis_username = \"RE009479\";\nmsg.genesis_password = \"_REPLACED_\";\nmsg.genesis_format = \"ffcsv\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 40,
    "wires": [["2e62dc6331eed002"]]
  },
  {
    "id": "2e62dc6331eed002",
    "type": "http request",
    "z": "46db4230f8090425",
    "name": "Abfrage Genesis",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://www.regionalstatistik.de/genesisws/rest/2020/data/tablefile?username={{genesis_username}}&password={{genesis_password}}&name={{genesis_name}}&area=all&compress=false&transpose=false&startyear={{startyear}}&endyear&timeslices&regionalvariable&regionalkey={{regionalkey}}&classifyingvariable1&classifyingkey1&classifyingvariable2&classifyingkey2&classifyingvariable3&classifyingkey3&format={{genesis_format}}&job=false&stand=&language=de",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 590,
    "y": 40,
    "wires": [["9b593be0a64b90d8"]]
  },
  {
    "id": "465a780b3da03913",
    "type": "function",
    "z": "46db4230f8090425",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\n\nconst isYear = (str) => {\n    // Regex pattern to match exactly four digits\n    const regex = /^\\d{4}$/;\n    return regex.test(str);\n}\n\n// transform data with adding measurement and timestamp\nmsg.payload.forEach(item => {\n    let timestamp = new Date()\n\n    if (isYear(item.Zeit)) {\n        const year = item.Zeit\n\n        // Get the timestamp from a new Date object with the year\n        timestamp = new Date(year, 0, 1).valueOf()\n    } else {\n        // Input German date: \"31.12.2021\"\n        const germanDate = item.Zeit;\n\n        // Split the date into day, month, and year components\n        const [day, month, year] = germanDate.split(\".\");\n\n        // Get the timestamp from a new Date object with the parsed\n        // components (Note: month - 1 because months are zero-indexed)\n        timestamp = new Date(year, month - 1, day).valueOf()\n    }\n\n    //change elemets format to standard float\n    item[\"AI0106__Anteil_der_Flaeche_fuer_Siedlung_an_Gesamtflaeche__Prozent\"] = parseFloat(item[\"AI0106__Anteil_der_Flaeche_fuer_Siedlung_an_Gesamtflaeche__Prozent\"].replace(',', '.'))\n    item[\"AI0107__Anteil_der_Flaeche_fuer_Verkehr_an_Gesamtflaeche__Prozent\"] = parseFloat(item[\"AI0107__Anteil_der_Flaeche_fuer_Verkehr_an_Gesamtflaeche__Prozent\"].replace(',', '.'))\n    item[\"AI0108__Anteil_der_Flaeche_fuer_Landwirtschaft_an_Gesamtflaeche__Prozent\"] = parseFloat(item[\"AI0108__Anteil_der_Flaeche_fuer_Landwirtschaft_an_Gesamtflaeche__Prozent\"].replace(',', '.'))\n    item[\"AI0109__Anteil_der_Flaeche_fuer_Wald_an_Gesamtflaeche__Prozent\"] = parseFloat(item[\"AI0109__Anteil_der_Flaeche_fuer_Wald_an_Gesamtflaeche__Prozent\"].replace(',', '.'))\n    item[\"AI0110__Anteil_Sport-,_Freizeit-,_Erholungsflaeche_an_Gesamtflaeche__Prozent\"] = parseFloat(item[\"AI0110__Anteil_Sport-,_Freizeit-,_Erholungsflaeche_an_Gesamtflaeche__Prozent\"].replace(',', '.'))\n    item[\"AI0111__Anteil_Siedlungs-_und_Verkehrsflaeche_an_Gesamtflaeche__Prozent\"] = parseFloat(item[\"AI0111__Anteil_Siedlungs-_und_Verkehrsflaeche_an_Gesamtflaeche__Prozent\"].replace(',', '.'))\n    item[\"AI0113__Siedlungs-_und_Verkehrsflaeche_je_EW__qm\"] = parseFloat(item[\"AI0113__Siedlungs-_und_Verkehrsflaeche_je_EW__qm\"].replace(',', '.'))\n    item[\"AI0114__Freiraumflaeche_je_EW__qm\"] = parseFloat(item[\"AI0114__Freiraumflaeche_je_EW__qm\"].replace(',', '.'))\n\n    //calculate \n    const totalArea = item[\"AI0113__Siedlungs-_und_Verkehrsflaeche_je_EW__qm\"] + item[\"AI0114__Freiraumflaeche_je_EW__qm\"]\n    item[\"versiegelt__Prozent\"] = (item[\"AI0113__Siedlungs-_und_Verkehrsflaeche_je_EW__qm\"] / totalArea) * 100\n    item[\"frei__Prozent\"] = (item[\"AI0114__Freiraumflaeche_je_EW__qm\"] / totalArea) * 100\n\n    const s = {\n        fields: item,\n        tags: {\n            label: item[\"1_Auspraegung_Label\"].trim(),\n            [item[\"1_Merkmal_Label\"]]: item[\"1_Auspraegung_Label\"].trim(),\n            [item[\"1_Merkmal_Code\"]]: item[\"1_Auspraegung_Code\"],\n            \"Genesis_Statistik_Code\": item.Statistik_Code,\n            \"Genesis_Statistik_Label\": item.Statistik_Label,\n            \"Genesis_Name\": msg.genesis_name\n        },\n        measurement: item[\"1_Auspraegung_Code\"],\n        timestamp\n    }\n    data_to_return.push(s)\n})\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 550,
    "y": 200,
    "wires": [["fc7b5cbf5dd85ebd", "12bbf554fa563939", "e515c5a823f5b8e2"]]
  },
  {
    "id": "c57148486ee26398",
    "type": "inject",
    "z": "64a0d85e0a9de25b",
    "name": "start",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 60,
    "wires": [["447dbac60980e173"]]
  },
  {
    "id": "447dbac60980e173",
    "type": "http request",
    "z": "64a0d85e0a9de25b",
    "name": "get data from api",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://www-genesis.destatis.de/genesisWS/rest/2020//data/tablefile?username=DE09EKT5VR&password=_REPLACED_&name=43521-0001&area=all&compress=false&transpose=false&startyear=1900&endyear&timeslices&regionalvariable&regionalkey&classifyingvariable1&classifyingkey1&classifyingvariable2&classifyingkey2&classifyingvariable3&classifyingkey3&format=ffcsv&job=false&language=de",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 170,
    "y": 140,
    "wires": [["665366ec343bf9a6"]]
  },
  {
    "id": "665366ec343bf9a6",
    "type": "csv",
    "z": "64a0d85e0a9de25b",
    "name": "change data  to CSV",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "one",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 400,
    "y": 140,
    "wires": [["90225ab642239899"]]
  },
  {
    "id": "90225ab642239899",
    "type": "switch",
    "z": "64a0d85e0a9de25b",
    "name": "switch between ethanol or diesel",
    "property": "payload.2_Auspraegung_Code",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "ETHANOL-BIO-01",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "DIESEL-BIO-01",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 220,
    "y": 400,
    "wires": [["23bbc4579fd92674"], ["33efdcfdfdb3c161"]]
  },
  {
    "id": "23bbc4579fd92674",
    "type": "function",
    "z": "64a0d85e0a9de25b",
    "name": "set variabels for ethanol",
    "func": "let date = msg.payload.Zeit + \"-12-31\"\nmsg.payload.date = new Date(date).valueOf()\nmsg.payload.measurement = \"bioethanol\"\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 510,
    "y": 360,
    "wires": [["5cc46cf897165fe3"]]
  },
  {
    "id": "33efdcfdfdb3c161",
    "type": "function",
    "z": "64a0d85e0a9de25b",
    "name": "set variabels for diesel",
    "func": "let date = msg.payload.Zeit+\"-12-31\"\nmsg.payload.date = new Date(date).valueOf()\nmsg.payload.measurement = \"biodiesel\"\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 500,
    "y": 440,
    "wires": [["5cc46cf897165fe3"]]
  },
  {
    "id": "5cc46cf897165fe3",
    "type": "function",
    "z": "64a0d85e0a9de25b",
    "name": "prepare database input",
    "func": "const item = msg.payload\nlet TRS001 = 0\nlet TRS002 = 0\nlet TRS003 = 0\n\n\n//check if a number\nif (!isNaN(item[\"TRS001__Erzeugung__t\"])){\n    TRS001 = item[\"TRS001__Erzeugung__t\"]\n}\nif (!isNaN(item[\"TRS002__Abgabe_(Inland)__t\"])) {\n    TRS002 = item[\"TRS002__Abgabe_(Inland)__t\"]\n}\nif (!isNaN(item[\"TRS003__Ausfuhr__t\"])) {\n    TRS003 = item[\"TRS003__Ausfuhr__t\"]\n}\n\nlet s = {\n    measurement: item.measurement,\n    fields: {\n        \"TRS001\": TRS001,\n        \"TRS002\": TRS002,\n        \"TRS003\": TRS003\n    },\n    tags: {\n\n    },\n    timestamp: item.date\n}\n\n\nmsg.payload = [s]\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 400,
    "wires": [["93022c1716b8bf37", "d26959e90e859821", "5db86edc7aa2b518"]]
  },
  {
    "id": "d26959e90e859821",
    "type": "influxdb batch",
    "z": "64a0d85e0a9de25b",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Destatis",
    "x": 1040,
    "y": 480,
    "wires": []
  },
  {
    "id": "93022c1716b8bf37",
    "type": "debug",
    "z": "64a0d85e0a9de25b",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1050,
    "y": 360,
    "wires": []
  },
  {
    "id": "63666a2a3dbb8438",
    "type": "catch",
    "z": "64a0d85e0a9de25b",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 620,
    "wires": [["9b78a6a5d8b64d31"]]
  },
  {
    "id": "a6303658b035b941",
    "type": "influxdb batch",
    "z": "64a0d85e0a9de25b",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 620,
    "wires": []
  },
  {
    "id": "9b78a6a5d8b64d31",
    "type": "function",
    "z": "64a0d85e0a9de25b",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Destatis\",\n    fields: {\n        bucket: \"Destatis\",\n        flow: \"Flächenversiegelung: Erhebung über Biotreibstoffe\",\n        error_message: msg.error.message,\n        genesis_name: \"43521-0001\",\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n        genesis_name: \"43521-0001\",\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 620,
    "wires": [["6ebfa0c398992044", "a6303658b035b941"]]
  },
  {
    "id": "6ebfa0c398992044",
    "type": "debug",
    "z": "64a0d85e0a9de25b",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 660,
    "wires": []
  },
  {
    "id": "16b201fd3d85ec7f",
    "type": "comment",
    "z": "64a0d85e0a9de25b",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 580,
    "wires": []
  },
  {
    "id": "ca5383eac6b7b4ad",
    "type": "link out",
    "z": "64a0d85e0a9de25b",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1085,
    "y": 620,
    "wires": []
  },
  {
    "id": "f085ff4a0312b39d",
    "type": "comment",
    "z": "64a0d85e0a9de25b",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1030,
    "y": 580,
    "wires": []
  },
  {
    "id": "5db86edc7aa2b518",
    "type": "function",
    "z": "64a0d85e0a9de25b",
    "name": "",
    "func": "msg.bucket = \"Destatis\"\nmsg.flow = \"Flächenversiegelung: Erhebung über Biotreibstoffe\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 990,
    "y": 620,
    "wires": [["ca5383eac6b7b4ad"]]
  },
  {
    "id": "f654c7a8cfda50ce",
    "type": "inject",
    "z": "153a349f98190ee9",
    "name": "",
    "props": [],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": "",
    "topic": "",
    "x": 120,
    "y": 100,
    "wires": [["a83df0ac44842c5b"]]
  },
  {
    "id": "56351356fab8b62f",
    "type": "split",
    "z": "153a349f98190ee9",
    "name": "split array of box ids",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 200,
    "y": 220,
    "wires": [["f2c4a19ed69644ed", "c22d554797d80541"]]
  },
  {
    "id": "f2c4a19ed69644ed",
    "type": "debug",
    "z": "153a349f98190ee9",
    "name": "Array of Boxes",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 220,
    "wires": []
  },
  {
    "id": "c22d554797d80541",
    "type": "http request",
    "z": "153a349f98190ee9",
    "name": "get information from all boxes",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://api.opensensemap.org/boxes/{{{payload.box_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 270,
    "y": 320,
    "wires": [["66efcf6d64ecb508", "00c2591f46813988"]]
  },
  {
    "id": "66efcf6d64ecb508",
    "type": "debug",
    "z": "153a349f98190ee9",
    "name": "Box-Informationen",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 850,
    "y": 320,
    "wires": []
  },
  {
    "id": "78a3b46841610d21",
    "type": "debug",
    "z": "153a349f98190ee9",
    "name": "InfluxDB-Data-Set",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 850,
    "y": 420,
    "wires": []
  },
  {
    "id": "6b5c813e5b208a99",
    "type": "comment",
    "z": "153a349f98190ee9",
    "name": "split array to use in get query from Api",
    "info": "",
    "x": 250,
    "y": 180,
    "wires": []
  },
  {
    "id": "6bafc650ce79e05e",
    "type": "comment",
    "z": "153a349f98190ee9",
    "name": "loop through box ids and query api anhand box id from last step ",
    "info": "",
    "x": 370,
    "y": 280,
    "wires": []
  },
  {
    "id": "e41496b1bddb0d34",
    "type": "comment",
    "z": "153a349f98190ee9",
    "name": "change returned object to easier use after save in database",
    "info": "",
    "x": 400,
    "y": 380,
    "wires": []
  },
  {
    "id": "5dae8a6c4e8d0196",
    "type": "influxdb batch",
    "z": "153a349f98190ee9",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "OpenSenseMap",
    "x": 890,
    "y": 540,
    "wires": []
  },
  {
    "id": "00c2591f46813988",
    "type": "function",
    "z": "153a349f98190ee9",
    "name": "change the answer",
    "func": "if (msg.payload != \"undefined\") {\n    const sensors = msg.payload.sensors\n    const box_id = msg.payload._id\n    const latitude = parseFloat(msg.payload.currentLocation.coordinates[1]);\n    const longitude = parseFloat(msg.payload.currentLocation.coordinates[0]);\n    const title = msg.payload.name\n    const sensorsEdited = sensors.map(sensor => {\n        let s = {\n            measurement: msg.boxes.find((box) => box.box_id == box_id).box_name,\n            fields: {\n                lastMeasurementValue: parseFloat(sensor.lastMeasurement.value),\n                lastMeasurementTime: sensor.lastMeasurement.createdAt,\n                icon: sensor.icon,\n                title: title,\n                unit: sensor.unit,\n                id: sensor._id,\n                box_id: box_id,\n                sensorType: sensor.sensorType,\n                latitude: latitude,\n                longitude: longitude\n            },\n            tags: {\n                sensore_title: sensor.title,\n                sensor_id: sensor._id\n            },\n            timestamp: new Date()\n        }\n\n        return s;\n    })\n    msg.payload = sensorsEdited\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 270,
    "y": 420,
    "wires": [["78a3b46841610d21", "5dae8a6c4e8d0196", "71105179cd697aed"]]
  },
  {
    "id": "0244db08035e515e",
    "type": "function",
    "z": "153a349f98190ee9",
    "name": "save boxes ins msg",
    "func": "msg.boxes = msg.payload;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 540,
    "y": 100,
    "wires": [["56351356fab8b62f"]]
  },
  {
    "id": "f005d5154e3f66b0",
    "type": "catch",
    "z": "153a349f98190ee9",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 160,
    "y": 720,
    "wires": [["a025eb0e6b54e5a0"]]
  },
  {
    "id": "fd68e84041047ba1",
    "type": "influxdb batch",
    "z": "153a349f98190ee9",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 650,
    "y": 720,
    "wires": []
  },
  {
    "id": "a025eb0e6b54e5a0",
    "type": "function",
    "z": "153a349f98190ee9",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"OpenSenseMap\",\n    fields: {\n        bucket: \"OpenSenseMap\",\n        flow: \"OpenSenseMap\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 720,
    "wires": [["fd68e84041047ba1", "a810ada72deaca6d"]]
  },
  {
    "id": "a810ada72deaca6d",
    "type": "debug",
    "z": "153a349f98190ee9",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 590,
    "y": 760,
    "wires": []
  },
  {
    "id": "7621aae956c66dd6",
    "type": "comment",
    "z": "153a349f98190ee9",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 180,
    "y": 680,
    "wires": []
  },
  {
    "id": "d88a7332b69d7eeb",
    "type": "link out",
    "z": "153a349f98190ee9",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1025,
    "y": 720,
    "wires": []
  },
  {
    "id": "f652f333c1d3438f",
    "type": "comment",
    "z": "153a349f98190ee9",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 970,
    "y": 680,
    "wires": []
  },
  {
    "id": "71105179cd697aed",
    "type": "function",
    "z": "153a349f98190ee9",
    "name": "",
    "func": "msg.bucket = \"OpenSenseMap\"\nmsg.flow = \"OpenSenseMap\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 930,
    "y": 720,
    "wires": [["d88a7332b69d7eeb"]]
  },
  {
    "id": "a83df0ac44842c5b",
    "type": "http request",
    "z": "153a349f98190ee9",
    "name": "",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/openSenseMap/boxes.json",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 310,
    "y": 100,
    "wires": [["0244db08035e515e"]]
  },
  {
    "id": "a1bf2f7bb5cb31c4",
    "type": "inject",
    "z": "740c14ecbd33260d",
    "name": "",
    "props": [],
    "repeat": "300",
    "crontab": "",
    "once": false,
    "onceDelay": "",
    "topic": "",
    "x": 140,
    "y": 80,
    "wires": [["ae3c9139bc2d264d"]]
  },
  {
    "id": "bc3afbf10501340f",
    "type": "split",
    "z": "740c14ecbd33260d",
    "name": "split array of sensor ids",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "topic",
    "x": 230,
    "y": 220,
    "wires": [["d6880ebde52d816f"]]
  },
  {
    "id": "034b61eaec1fadf4",
    "type": "comment",
    "z": "740c14ecbd33260d",
    "name": "split array to use in get query from Api",
    "info": "",
    "x": 270,
    "y": 180,
    "wires": []
  },
  {
    "id": "43ae177e90abe7b1",
    "type": "debug",
    "z": "740c14ecbd33260d",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 930,
    "y": 480,
    "wires": []
  },
  {
    "id": "ecb436531684ef58",
    "type": "comment",
    "z": "740c14ecbd33260d",
    "name": "loop through sensor ids and query api anhand id from last step ",
    "info": "",
    "x": 610,
    "y": 320,
    "wires": []
  },
  {
    "id": "d6880ebde52d816f",
    "type": "http request",
    "z": "740c14ecbd33260d",
    "name": "get information from all sensores",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://data.sensor.community/airrohr/v1/sensor/{{payload}}/",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 520,
    "y": 380,
    "wires": [["f4d8b8db5cb33d01"]]
  },
  {
    "id": "f35ec3f4aeea434a",
    "type": "comment",
    "z": "740c14ecbd33260d",
    "name": "change returned object to easier use after save in database",
    "info": "",
    "x": 600,
    "y": 440,
    "wires": []
  },
  {
    "id": "f4d8b8db5cb33d01",
    "type": "function",
    "z": "740c14ecbd33260d",
    "name": "change the answer",
    "func": "let response = msg.payload[0]\n\nif (response?.sensor) {\n    let sensor_id = response.sensor.id;\n    let p1 = response.sensordatavalues.find(element => element.value_type == \"P1\")\n    let p2 = response.sensordatavalues.find(element => element.value_type == \"P2\")\n\n    let s = {\n        measurement: response.sensor.id,\n        fields: {\n            longitude: parseFloat(response.location.longitude),\n            latitude: parseFloat(response.location.latitude),\n            lastMeasurementTime: response.timestamp,\n            p1Value: parseFloat(p1.value),\n            p2Value: parseFloat(p2.value),\n\n        },\n        tags: {\n\n        },\n        timestamp: new Date().valueOf()\n    }\n\n    msg.payload = [s];\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 470,
    "y": 480,
    "wires": [["43ae177e90abe7b1", "042be93fc5a3fdfb", "fecb6e7b144dcedb"]]
  },
  {
    "id": "042be93fc5a3fdfb",
    "type": "influxdb batch",
    "z": "740c14ecbd33260d",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Feinstaub",
    "x": 970,
    "y": 540,
    "wires": []
  },
  {
    "id": "71d1073bf1af90cc",
    "type": "catch",
    "z": "740c14ecbd33260d",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 160,
    "y": 680,
    "wires": [["99ada8b7a9146b8a"]]
  },
  {
    "id": "72cd5532a47f3e57",
    "type": "influxdb batch",
    "z": "740c14ecbd33260d",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 650,
    "y": 680,
    "wires": []
  },
  {
    "id": "99ada8b7a9146b8a",
    "type": "function",
    "z": "740c14ecbd33260d",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Feinstaub\",\n    fields: {\n        bucket: \"Feinstaub\",\n        flow: \"Feinstaub-Daten\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 680,
    "wires": [["72cd5532a47f3e57", "997337afc36f37d6"]]
  },
  {
    "id": "997337afc36f37d6",
    "type": "debug",
    "z": "740c14ecbd33260d",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 590,
    "y": 720,
    "wires": []
  },
  {
    "id": "5a03a90a754be394",
    "type": "comment",
    "z": "740c14ecbd33260d",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 180,
    "y": 640,
    "wires": []
  },
  {
    "id": "4ebf75ce5a8ca1f6",
    "type": "link out",
    "z": "740c14ecbd33260d",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1025,
    "y": 680,
    "wires": []
  },
  {
    "id": "5afe712a02532d87",
    "type": "comment",
    "z": "740c14ecbd33260d",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 970,
    "y": 640,
    "wires": []
  },
  {
    "id": "fecb6e7b144dcedb",
    "type": "function",
    "z": "740c14ecbd33260d",
    "name": "",
    "func": "msg.bucket = \"Feinstaub\"\nmsg.flow = \"Feinstaub-Daten\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 930,
    "y": 680,
    "wires": [["4ebf75ce5a8ca1f6"]]
  },
  {
    "id": "ae3c9139bc2d264d",
    "type": "http request",
    "z": "740c14ecbd33260d",
    "name": "",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/Sensor.Community/boxes.json",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 330,
    "y": 80,
    "wires": [["bc3afbf10501340f"]]
  },
  {
    "id": "8d902fcf.90bb7",
    "type": "inject",
    "z": "96b765fa43a7bae6",
    "name": "",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "86400",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[{\"url\":\"https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/daily/kl/recent/tageswerte_KL_05546_akt.zip\"}]",
    "payloadType": "json",
    "x": 130,
    "y": 120,
    "wires": [["a06bdafa90d297dc"]]
  },
  {
    "id": "a71868ce.3820d8",
    "type": "http request",
    "z": "96b765fa43a7bae6",
    "name": "request zip file",
    "method": "GET",
    "ret": "bin",
    "paytoqs": "ignore",
    "url": "{{{payload.url}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 660,
    "y": 200,
    "wires": [["a9ce6cd9.365f2"]]
  },
  {
    "id": "f4ae454.5fc5cb8",
    "type": "debug",
    "z": "96b765fa43a7bae6",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1270,
    "y": 720,
    "wires": []
  },
  {
    "id": "a9ce6cd9.365f2",
    "type": "zip",
    "z": "96b765fa43a7bae6",
    "name": "decompress zip-files",
    "mode": "decompress",
    "filename": "",
    "compressionlevel": 6,
    "outasstring": true,
    "x": 720,
    "y": 300,
    "wires": [["34b3e74c6f174118"]]
  },
  {
    "id": "34b3e74c6f174118",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "find goal file",
    "func": "const file = msg.payload.find(item => item.filename.startsWith('produkt_'));\nmsg.payload = file.payload\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 790,
    "y": 420,
    "wires": [["79a01ac817aa3e5c", "8e895a04b5d81d20"]]
  },
  {
    "id": "8e895a04b5d81d20",
    "type": "csv",
    "z": "96b765fa43a7bae6",
    "name": "change to array",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 860,
    "y": 560,
    "wires": [["90e2365d3826748c"]]
  },
  {
    "id": "90e2365d3826748c",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "prepare for influxdb",
    "func": "const db_measurement = msg.payload[0][\"STATIONS_ID\"]\n\nlet data_to_return = []\n\nmsg.payload.forEach(measurement => {\n    let date = measurement[\"MESS_DATUM\"] || measurement[\"MESS_DATUM_ENDE\"]\n    date = date.toString().replace(/(\\d{4})(\\d{2})(\\d{2})/g, '$1-$2-$3');\n    date = new Date(date)\n    const timestamp = date.valueOf()\n    const monthIndex = date.getMonth()\n\n    let s = {\n        measurement: db_measurement,\n        fields: {\n            ...measurement\n        },\n        tags: {\n\n        },\n        timestamp\n    }\n\n    if (msg?.[\"MITTEL_1961_1990\"] && msg?.[\"MITTEL_1991_2020\"]) {\n        s.fields[\"MITTEL_1961_1990\"] = msg[\"MITTEL_1961_1990\"][monthIndex];\n        s.fields[\"MITTEL_1991_2020\"] = msg[\"MITTEL_1991_2020\"][monthIndex];\n    }\n\n    if (msg?.[\"MITTEL_TEMP_1961_1990\"] && msg?.[\"MITTEL_TEMP_1991_2020\"]) {\n        s.fields[\"MITTEL_TEMP_1961_1990\"] = msg[\"MITTEL_TEMP_1961_1990\"][monthIndex];\n        s.fields[\"MITTEL_TEMP_1991_2020\"] = msg[\"MITTEL_TEMP_1991_2020\"][monthIndex];\n    }\n\n    data_to_return.push(s);\n});\n\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 810,
    "y": 720,
    "wires": [["f4ae454.5fc5cb8", "259fad925f149f17", "2426d9f065b90522", "c4c670f32e719816"]]
  },
  {
    "id": "a06bdafa90d297dc",
    "type": "split",
    "z": "96b765fa43a7bae6",
    "name": "split entry points",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 330,
    "y": 120,
    "wires": [["1f68c93bee37fcab"]]
  },
  {
    "id": "7bd5f1a388596ae8",
    "type": "delay",
    "z": "96b765fa43a7bae6",
    "name": "delay request",
    "pauseType": "rate",
    "timeout": "15",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 420,
    "y": 200,
    "wires": [["a71868ce.3820d8"]]
  },
  {
    "id": "1f68c93bee37fcab",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "save entries ",
    "func": "msg.entry = msg.payload\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 550,
    "y": 120,
    "wires": [["7bd5f1a388596ae8"]]
  },
  {
    "id": "259fad925f149f17",
    "type": "influxdb batch",
    "z": "96b765fa43a7bae6",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "DWD",
    "x": 1270,
    "y": 800,
    "wires": []
  },
  {
    "id": "204c8949bc551340",
    "type": "inject",
    "z": "96b765fa43a7bae6",
    "name": "",
    "props": [],
    "repeat": "86400",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 130,
    "y": 520,
    "wires": [["d3ee6259c55deceb"]]
  },
  {
    "id": "79a01ac817aa3e5c",
    "type": "debug",
    "z": "96b765fa43a7bae6",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1030,
    "y": 300,
    "wires": []
  },
  {
    "id": "e542bd41560e07fa",
    "type": "inject",
    "z": "96b765fa43a7bae6",
    "name": "",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "3600",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[{\"url\":\"https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/10_minutes/air_temperature/now/10minutenwerte_TU_05546_now.zip\"}]",
    "payloadType": "json",
    "x": 130,
    "y": 320,
    "wires": [["a06bdafa90d297dc"]]
  },
  {
    "id": "b1bb973e08723fe6",
    "type": "comment",
    "z": "96b765fa43a7bae6",
    "name": "DWD Temperatur im 60-Minuten-Intervall",
    "info": "",
    "x": 180,
    "y": 280,
    "wires": []
  },
  {
    "id": "9aa0c308a023cb59",
    "type": "inject",
    "z": "96b765fa43a7bae6",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "measurement",
        "v": "Waldbrandgefahrenindex",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 02 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 1100,
    "wires": [["722aac2ed12bdc0a"]]
  },
  {
    "id": "026e7a413d2a9d1e",
    "type": "html",
    "z": "96b765fa43a7bae6",
    "name": "",
    "property": "payload",
    "outproperty": "table.header",
    "tag": "section[aria-label=\"Brandenburg\"] table thead tr th[id^=\"spnr\"]",
    "ret": "text",
    "as": "single",
    "x": 670,
    "y": 1100,
    "wires": [["19de5f6dc1d23bfd"]]
  },
  {
    "id": "722aac2ed12bdc0a",
    "type": "http request",
    "z": "96b765fa43a7bae6",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://www.dwd.de/DWD/warnungen/agrar/wbx/wbx_tab_alle_BB.html",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 310,
    "y": 1100,
    "wires": [["026e7a413d2a9d1e"]]
  },
  {
    "id": "33242768c3fb2dd5",
    "type": "debug",
    "z": "96b765fa43a7bae6",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 870,
    "y": 1260,
    "wires": []
  },
  {
    "id": "baa33fbb2ef9bcc0",
    "type": "debug",
    "z": "96b765fa43a7bae6",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "table",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 860,
    "y": 1180,
    "wires": []
  },
  {
    "id": "19de5f6dc1d23bfd",
    "type": "html",
    "z": "96b765fa43a7bae6",
    "name": "",
    "property": "payload",
    "outproperty": "table.body",
    "tag": "section[aria-label=\"Brandenburg\"] table tbody tr",
    "ret": "text",
    "as": "single",
    "x": 540,
    "y": 1180,
    "wires": [["baa33fbb2ef9bcc0", "6025a7bfaeb178a1"]]
  },
  {
    "id": "6025a7bfaeb178a1",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\n// transform data with adding measurement and timestamp\nmsg.table.body.forEach(item => {\n    const currentDate = new Date();\n    const year = currentDate.getFullYear();\n    const dates = msg.table.header.slice(1);\n    \n    // Define the regular expression pattern\n    const pattern = /(\\d{2})\\.(\\d{2})\\./;\n\n    dates.forEach((dateString, index) => {\n        // Use the match() method with the regex pattern\n        const match = dateString.match(pattern);\n\n        // Extract the day and month from the regex match result\n        const day = parseInt(match[1]);\n        const month = parseInt(match[2]);\n\n        // Get the timestamp from a new Date object with the year\n        const timestamp = new Date(year, month - 1, day).valueOf()\n\n        const values = item.split('\\n').map(entry => entry.trim()).filter(entry => !!entry);\n\n        const s = {\n            fields: {\n                value: values[index + 1],\n                parsedValue: parseInt(values[index + 1])\n            },\n            tags: {\n                station: values[0]\n            },\n            measurement,\n            timestamp\n        }\n        data_to_return.push(s)\n    })\n})\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 450,
    "y": 1260,
    "wires": [["33242768c3fb2dd5", "59fa38fbafa6aaa2", "c4c670f32e719816"]]
  },
  {
    "id": "59fa38fbafa6aaa2",
    "type": "influxdb batch",
    "z": "96b765fa43a7bae6",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "DWD",
    "x": 910,
    "y": 1300,
    "wires": []
  },
  {
    "id": "9e0c981434bb03cd",
    "type": "inject",
    "z": "96b765fa43a7bae6",
    "name": "",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "86400",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[{\"url\":\"https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/annual/climate_indices/kl/historical/jahreswerte_KLINDEX_05546_19670401_20221231_hist.zip\"}]",
    "payloadType": "json",
    "x": 130,
    "y": 420,
    "wires": [["a06bdafa90d297dc"]]
  },
  {
    "id": "8e80ae32b9c883d5",
    "type": "comment",
    "z": "96b765fa43a7bae6",
    "name": "DWD besondere Tageswerte historisch 1968 bis 2022",
    "info": "",
    "x": 220,
    "y": 380,
    "wires": []
  },
  {
    "id": "737bc0445424d9a4",
    "type": "comment",
    "z": "96b765fa43a7bae6",
    "name": "DWD Monatssumme der Niederschlagshoehe",
    "info": "",
    "x": 190,
    "y": 480,
    "wires": []
  },
  {
    "id": "2426d9f065b90522",
    "type": "debug",
    "z": "96b765fa43a7bae6",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1250,
    "y": 680,
    "wires": []
  },
  {
    "id": "1f5ea6e39980e273",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "CSV Mittelwerte verarbeiten",
    "func": "const csvData = msg.payload;\nconst rows = csvData.split('\\n');\n\nif (rows?.length) {\n  const headers = rows[0].split(';');\n\n  for (let index = 1; index < rows.length; index++) {\n    const row = rows[index];\n    const values = row.split(';');\n    \n    if (values?.[0]?.length && !values?.[0]?.includes('MITTEL_TEMP')) {\n      const obj = {};\n\n      for (let j = 0; j < headers.length; j++) {\n        obj[j-4] = parseInt(values[j]);\n      }\n\n      msg[values[0]] = obj;\n    }\n  }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 200,
    "y": 580,
    "wires": [["a3d20ac359d1d091"]]
  },
  {
    "id": "fead308d875ecbf0",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "CSV Mittelwerte Temperatur verarbeiten",
    "func": "const csvData = msg.payload;\nconst rows = csvData.split('\\n');\n\nif (rows?.length) {\n  const headers = rows[0].split(';');\n\n  for (let index = 1; index < rows.length; index++) {\n    const row = rows[index];\n    const values = row.split(';');\n\n    if (values?.[0]?.length && values?.[0]?.includes('MITTEL_TEMP')) {\n      const obj = {};\n\n      for (let j = 0; j < headers.length; j++) {\n        obj[j-4] = parseInt(values[j]);\n      }\n\n      msg[values[0]] = obj;\n    }\n  }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 240,
    "y": 800,
    "wires": [["a3878f0d56fd1a6c"]]
  },
  {
    "id": "a11727b31d95262f",
    "type": "inject",
    "z": "96b765fa43a7bae6",
    "name": "",
    "props": [],
    "repeat": "86400",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 130,
    "y": 740,
    "wires": [["29e2bc5c609aeb66"]]
  },
  {
    "id": "54f24572c2bda1a0",
    "type": "comment",
    "z": "96b765fa43a7bae6",
    "name": "DWD Monatssumme mit Temperatur",
    "info": "",
    "x": 160,
    "y": 700,
    "wires": []
  },
  {
    "id": "e61bf3dd3d9b4bbb",
    "type": "inject",
    "z": "96b765fa43a7bae6",
    "name": "",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "86400",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[{\"url\":\"https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/annual/kl/historical/jahreswerte_KL_05546_19670401_20221231_hist.zip\"}]",
    "payloadType": "json",
    "x": 110,
    "y": 960,
    "wires": [["a06bdafa90d297dc"]]
  },
  {
    "id": "b7326dda462d0fc9",
    "type": "comment",
    "z": "96b765fa43a7bae6",
    "name": "DWD Jahresmittelwerte historisch 1967 bis 2022",
    "info": "",
    "x": 200,
    "y": 920,
    "wires": []
  },
  {
    "id": "12c8fb71d62841a6",
    "type": "catch",
    "z": "96b765fa43a7bae6",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 1420,
    "wires": [["5d8c9c6b9b35bb03"]]
  },
  {
    "id": "f592ee3bcf84eee9",
    "type": "influxdb batch",
    "z": "96b765fa43a7bae6",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 1420,
    "wires": []
  },
  {
    "id": "5d8c9c6b9b35bb03",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"DWD\",\n    fields: {\n        bucket: \"DWD\",\n        flow: \"DWD\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 1420,
    "wires": [["f592ee3bcf84eee9", "ef0c16d0f1dea1c0"]]
  },
  {
    "id": "ef0c16d0f1dea1c0",
    "type": "debug",
    "z": "96b765fa43a7bae6",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 1460,
    "wires": []
  },
  {
    "id": "babfea0a5813267f",
    "type": "comment",
    "z": "96b765fa43a7bae6",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 1380,
    "wires": []
  },
  {
    "id": "ca9199a3c778417b",
    "type": "link out",
    "z": "96b765fa43a7bae6",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1265,
    "y": 1420,
    "wires": []
  },
  {
    "id": "ab598e3872ed2ef3",
    "type": "comment",
    "z": "96b765fa43a7bae6",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1210,
    "y": 1380,
    "wires": []
  },
  {
    "id": "c4c670f32e719816",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "",
    "func": "msg.bucket = \"DWD\"\nmsg.flow = \"DWD\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1170,
    "y": 1420,
    "wires": [["ca9199a3c778417b"]]
  },
  {
    "id": "d3ee6259c55deceb",
    "type": "http request",
    "z": "96b765fa43a7bae6",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/Deutscher%20Wetterdienst/mittelwerte_historisch.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 330,
    "y": 520,
    "wires": [["1f5ea6e39980e273"]]
  },
  {
    "id": "a3878f0d56fd1a6c",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "url to payload",
    "func": "msg.payload = [{\n  \"url\": \"https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/monthly/kl/recent/monatswerte_KL_05546_akt.zip\"\n}]\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 160,
    "y": 860,
    "wires": [["a06bdafa90d297dc"]]
  },
  {
    "id": "a3d20ac359d1d091",
    "type": "function",
    "z": "96b765fa43a7bae6",
    "name": "url to payload",
    "func": "msg.payload = [{\n  \"url\": \"https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/monthly/more_precip/recent/monatswerte_RR_05546_akt.zip\"\n}]\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 160,
    "y": 640,
    "wires": [["a06bdafa90d297dc"]]
  },
  {
    "id": "29e2bc5c609aeb66",
    "type": "http request",
    "z": "96b765fa43a7bae6",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/Deutscher%20Wetterdienst/mittelwerte_historisch.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 330,
    "y": 740,
    "wires": [["fead308d875ecbf0"]]
  },
  {
    "id": "3ac5412697feca3e",
    "type": "comment",
    "z": "96b765fa43a7bae6",
    "name": "DWD Waldbrandgefahrenindex von Webseite",
    "info": "",
    "x": 190,
    "y": 1060,
    "wires": []
  },
  {
    "id": "9c260d79a52d3892",
    "type": "inject",
    "z": "262c15f3e20fedc2",
    "name": "Start",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[{\"dir\":\"37413750\",\"lat\":\"52.212505\",\"lng\":\"12.596859\"},{\"dir\":\"38404661\",\"lat\":\"52.168186\",\"lng\":\"12.409393\"},{\"dir\":\"38404670\",\"lat\":\"52.190288\",\"lng\":\"12.468472\"},{\"dir\":\"38404690\",\"lat\":\"52.116096\",\"lng\":\"12.452589\"},{\"dir\":\"38413420\",\"lat\":\"52.194992\",\"lng\":\"12.612070\"},{\"dir\":\"38413421\",\"lat\":\"52.194731\",\"lng\":\"12.611944\"},{\"dir\":\"38413430\",\"lat\":\"52.142618\",\"lng\":\"12.563512\"},{\"dir\":\"38413440\",\"lat\":\"52.193508\",\"lng\":\"12.559702\"},{\"dir\":\"38413441\",\"lat\":\"52.193317\",\"lng\":\"12.559569\"},{\"dir\":\"38413442\",\"lat\":\"52.193513\",\"lng\":\"12.559430\"},{\"dir\":\"38413443\",\"lat\":\"52.193542\",\"lng\":\"12.559510\"},{\"dir\":\"38413453\",\"lat\":\"52.184550\",\"lng\":\"12.624177\"},{\"dir\":\"38413454\",\"lat\":\"52.184544\",\"lng\":\"12.623898\"},{\"dir\":\"38413470\",\"lat\":\"52.145028\",\"lng\":\"12.634924\"},{\"dir\":\"38413471\",\"lat\":\"52.145026\",\"lng\":\"12.634854\"},{\"dir\":\"38413472\",\"lat\":\"52.145025\",\"lng\":\"12.634785\"},{\"dir\":\"38413485\",\"lat\":\"52.113460\",\"lng\":\"12.626094\"},{\"dir\":\"38413486\",\"lat\":\"52.113290\",\"lng\":\"12.626173\"},{\"dir\":\"38413490\",\"lat\":\"52.157602\",\"lng\":\"12.607855\"},{\"dir\":\"38423150\",\"lat\":\"52.133186\",\"lng\":\"12.741586\"},{\"dir\":\"38423250\",\"lat\":\"52.166693\",\"lng\":\"12.681782\"},{\"dir\":\"39400001\",\"lat\":\"52.072878\",\"lng\":\"12.450520\"},{\"dir\":\"39413095\",\"lat\":\"52.052868\",\"lng\":\"12.619900\"},{\"dir\":\"39413110\",\"lat\":\"52.040546\",\"lng\":\"12.578402\"},{\"dir\":\"39423102\",\"lat\":\"52.083280\",\"lng\":\"12.680020\"}]",
    "payloadType": "json",
    "x": 130,
    "y": 80,
    "wires": [["cb1d804a42488d4d"]]
  },
  {
    "id": "cb1d804a42488d4d",
    "type": "split",
    "z": "262c15f3e20fedc2",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 170,
    "y": 140,
    "wires": [["e67faf18f29996ad"]]
  },
  {
    "id": "ef562eac9ca7f53f",
    "type": "http request",
    "z": "262c15f3e20fedc2",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://bad-belzig.klima-daten.de/wp-content/uploads/Grundwasser-Messungen/gok/{{{station.dir}}}/Metadaten.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 430,
    "y": 200,
    "wires": [["f2cd45d72a0fcb6e"]]
  },
  {
    "id": "f2cd45d72a0fcb6e",
    "type": "csv",
    "z": "262c15f3e20fedc2",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 610,
    "y": 200,
    "wires": [["f7baaffce176701d"]]
  },
  {
    "id": "978071f4c0c8529b",
    "type": "debug",
    "z": "262c15f3e20fedc2",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1110,
    "y": 400,
    "wires": []
  },
  {
    "id": "f7baaffce176701d",
    "type": "function",
    "z": "262c15f3e20fedc2",
    "name": "",
    "func": "let response = {}\nlet i = 1\n\nmsg.payload.forEach(element => {\n  response[element.Metadatum] = element.Wert\n});\n\nmsg.meta = response;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 200,
    "wires": [["2e7003a3e61b227a"]]
  },
  {
    "id": "2e7003a3e61b227a",
    "type": "http request",
    "z": "262c15f3e20fedc2",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://bad-belzig.klima-daten.de/wp-content/uploads/Grundwasser-Messungen/gok/{{{station.dir}}}/messreihen.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 550,
    "y": 320,
    "wires": [["177e62061c047261"]]
  },
  {
    "id": "177e62061c047261",
    "type": "csv",
    "z": "262c15f3e20fedc2",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 710,
    "y": 320,
    "wires": [["c5f779561b4af416"]]
  },
  {
    "id": "c5f779561b4af416",
    "type": "function",
    "z": "262c15f3e20fedc2",
    "name": "",
    "func": "function getRandomInt(min, max) {\n   min = Math.ceil(min);\n   max = Math.floor(max);\n   return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n}\n\nconst meta = msg.meta\nconst station = msg.station\nconst measurements = msg.payload\n\nlet avrage_value = meta?.[\"MW - Mittlerer Wasserstand [cm u. GOK]\"]\nlet lng = parseFloat(station.lng)\nlet lat = parseFloat(station.lat)\nlet db_measurement = \"gok\"+station.dir\n\nlet data_to_return = []\n\nmeasurements.forEach(measurement => {\n   if (measurement[\"Datum\"]) {\n      let date = measurement[\"Datum\"].split(\".\").reverse().join(\"-\")\n      let value = measurement[\"Wasserstand(GOK) [cm u. GOK]\"]\n      value = value.toString().replace(',', '.')\n      let s = {\n         measurement: db_measurement,\n         fields: {\n            latitude: lat,\n            longitude: lng,\n            valuetest: value,\n            value: parseFloat(value),\n            date: date,\n            status: getRandomInt(-1,2),\n            mid: avrage_value\n         },\n         tags: {\n\n         },\n         timestamp: new Date(date).valueOf()\n      }\n      data_to_return.push(s);\n   } else {\n      data_to_return.push(db_measurement);\n   }\n});\n\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 320,
    "wires": [["978071f4c0c8529b", "bcf82d6acd6c0701", "6c9d9278fe219382"]]
  },
  {
    "id": "bcf82d6acd6c0701",
    "type": "influxdb batch",
    "z": "262c15f3e20fedc2",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "apw",
    "x": 1110,
    "y": 320,
    "wires": []
  },
  {
    "id": "e67faf18f29996ad",
    "type": "delay",
    "z": "262c15f3e20fedc2",
    "name": "",
    "pauseType": "rate",
    "timeout": "15",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 390,
    "y": 140,
    "wires": [["48efae4f03dfcb83"]]
  },
  {
    "id": "497039de7de1d9c4",
    "type": "http in",
    "z": "262c15f3e20fedc2",
    "name": "",
    "url": "/api/v1/import/apw",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 190,
    "y": 820,
    "wires": [["8d20ccda5cae3d98", "604e0071955d601b", "7fd361b692b0fb73"]]
  },
  {
    "id": "8d20ccda5cae3d98",
    "type": "debug",
    "z": "262c15f3e20fedc2",
    "name": "api",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 490,
    "y": 820,
    "wires": []
  },
  {
    "id": "604e0071955d601b",
    "type": "http response",
    "z": "262c15f3e20fedc2",
    "name": "",
    "statusCode": "200",
    "headers": {},
    "x": 500,
    "y": 880,
    "wires": []
  },
  {
    "id": "26fdacdaf226d4e4",
    "type": "array-loop",
    "z": "262c15f3e20fedc2",
    "name": "loop über filenames",
    "key": "filenames_index",
    "keyType": "msg",
    "reset": true,
    "resetValue": "value-null",
    "array": "filenames",
    "arrayType": "msg",
    "x": 310,
    "y": 700,
    "wires": [["47cc44c780d8c9c8"], ["0e29952e8a921d97"]]
  },
  {
    "id": "84274d158f987364",
    "type": "debug",
    "z": "262c15f3e20fedc2",
    "name": "file",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 620,
    "wires": []
  },
  {
    "id": "0e29952e8a921d97",
    "type": "function",
    "z": "262c15f3e20fedc2",
    "name": "station data",
    "func": "msg.timestamp = new Date().valueOf()\n\nconst splitPayload = msg.payload.split(\",\")\n\nmsg.station = {}\nmsg.station.dir = splitPayload[0]\nmsg.station.lat = splitPayload[1]\nmsg.station.lng = splitPayload[2]\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 310,
    "y": 620,
    "wires": [["26fdacdaf226d4e4", "84274d158f987364", "a9a8083f5564e00e"]]
  },
  {
    "id": "7fd361b692b0fb73",
    "type": "function",
    "z": "262c15f3e20fedc2",
    "name": "filenames",
    "func": "msg.filenames = msg.payload.filenames;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 140,
    "y": 760,
    "wires": [["26fdacdaf226d4e4"]]
  },
  {
    "id": "47cc44c780d8c9c8",
    "type": "debug",
    "z": "262c15f3e20fedc2",
    "name": "ende",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 700,
    "wires": []
  },
  {
    "id": "48efae4f03dfcb83",
    "type": "function",
    "z": "262c15f3e20fedc2",
    "name": "",
    "func": "msg.station = msg.payload\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 240,
    "y": 200,
    "wires": [["ef562eac9ca7f53f"]]
  },
  {
    "id": "a9a8083f5564e00e",
    "type": "http request",
    "z": "262c15f3e20fedc2",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/Auskunftsplattform%20Wasser%20Land%20Brandenburg/{{payload}}.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 550,
    "y": 380,
    "wires": [["177e62061c047261"]]
  },
  {
    "id": "3fe90b4c2a87d62d",
    "type": "catch",
    "z": "262c15f3e20fedc2",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 1000,
    "wires": [["c49eca90b334cb50"]]
  },
  {
    "id": "c62598b03081bc72",
    "type": "influxdb batch",
    "z": "262c15f3e20fedc2",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 1000,
    "wires": []
  },
  {
    "id": "c49eca90b334cb50",
    "type": "function",
    "z": "262c15f3e20fedc2",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"apw\",\n    fields: {\n        bucket: \"apw\",\n        flow: \"Grundwassermessstellen - GOK\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 1000,
    "wires": [["c62598b03081bc72", "f809c51fff5019ec"]]
  },
  {
    "id": "f809c51fff5019ec",
    "type": "debug",
    "z": "262c15f3e20fedc2",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 1040,
    "wires": []
  },
  {
    "id": "e0526b91d26a0539",
    "type": "comment",
    "z": "262c15f3e20fedc2",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 960,
    "wires": []
  },
  {
    "id": "2f159e03d538a82c",
    "type": "link out",
    "z": "262c15f3e20fedc2",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1155,
    "y": 1000,
    "wires": []
  },
  {
    "id": "cfb95612a399ce79",
    "type": "comment",
    "z": "262c15f3e20fedc2",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1100,
    "y": 960,
    "wires": []
  },
  {
    "id": "6c9d9278fe219382",
    "type": "function",
    "z": "262c15f3e20fedc2",
    "name": "",
    "func": "msg.bucket = \"apw\"\nmsg.flow = \"Grundwassermessstellen - GOK\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1060,
    "y": 1000,
    "wires": [["2f159e03d538a82c"]]
  },
  {
    "id": "a0f75f39590c929c",
    "type": "inject",
    "z": "a8bf5810905e996f",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "30 03 * * 1,2,3,4,5",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 170,
    "y": 60,
    "wires": [["87e3d9e51c70abf0"]]
  },
  {
    "id": "87e3d9e51c70abf0",
    "type": "http request",
    "z": "a8bf5810905e996f",
    "name": "",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://opendata.rhein-kreis-neuss.de/api/records/1.0/search/?dataset=rhein-kreis-neuss-ladesaulen-in-deutschland&q=&rows=1000&facet=betreiber&facet=art_der_ladeeinrichung&facet=anzahl_ladepunkte&facet=anschlussleistung&facet=steckertypen1&facet=steckertypen2&facet=steckertypen3&facet=steckertypen4&facet=p1_kw&facet=p2_kw&facet=p3_kw&facet=p4_kw&facet=kreis_kreisfreie_stadt&facet=ort&facet=postleitzahl&facet=inbetriebnahmedatum&refine.kreis_kreisfreie_stadt=Landkreis%20Potsdam-Mittelmark",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 350,
    "y": 120,
    "wires": [["9d398ac103f42ed9", "383dd55e3385fdf5"]]
  },
  {
    "id": "de128c052bf76c46",
    "type": "debug",
    "z": "a8bf5810905e996f",
    "name": "Debug 2",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 960,
    "y": 300,
    "wires": []
  },
  {
    "id": "9d398ac103f42ed9",
    "type": "function",
    "z": "a8bf5810905e996f",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\nconst measurement = msg.payload.parameters.dataset\n\n// transform data with adding measurement and timestamp\nmsg.payload.records.forEach(item => {\n    const timestamp = new Date(item.record_timestamp).valueOf()\n\n    const s = {\n        fields: {\n            ...item.fields,\n            recordid: item.recordid,\n            latitude: item.fields.koordinaten[0],\n            longitude: item.fields.koordinaten[1]\n        },\n        tags: {\n            betreiber: item.fields.betreiber,\n            art_der_ladeeinrichung: item.fields.art_der_ladeeinrichung,\n            anzahl_ladepunkte: item.fields.anzahl_ladepunkte,\n            kreis_kreisfreie_stadt: item.fields.kreis_kreisfreie_stadt,\n            steckertypen1: item.fields.steckertypen1,\n            steckertypen2: item.fields.steckertypen2,\n            steckertypen3: item.fields.steckertypen3,\n            steckertypen4: item.fields.steckertypen4,\n        },\n        measurement,\n        timestamp\n    }\n    data_to_return.push(s)\n})\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 630,
    "y": 260,
    "wires": [["de128c052bf76c46", "7777f7a7b7aac918", "7ef76bae22653016"]]
  },
  {
    "id": "7777f7a7b7aac918",
    "type": "influxdb batch",
    "z": "a8bf5810905e996f",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Open-Data-Neuss",
    "x": 980,
    "y": 400,
    "wires": []
  },
  {
    "id": "383dd55e3385fdf5",
    "type": "debug",
    "z": "a8bf5810905e996f",
    "name": "Debug 1",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 700,
    "y": 120,
    "wires": []
  },
  {
    "id": "ee18ff3b2222c606",
    "type": "catch",
    "z": "a8bf5810905e996f",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 160,
    "y": 520,
    "wires": [["8f21c59783b2bf58"]]
  },
  {
    "id": "2f6acc065b4f95db",
    "type": "influxdb batch",
    "z": "a8bf5810905e996f",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 650,
    "y": 520,
    "wires": []
  },
  {
    "id": "8f21c59783b2bf58",
    "type": "function",
    "z": "a8bf5810905e996f",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Open-Data-Neuss\",\n    fields: {\n        bucket: \"Open-Data-Neuss\",\n        flow: \"E-Mobilität, Ladestationen im Fläming\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 520,
    "wires": [["2f6acc065b4f95db", "fdda9a40f575ea5f"]]
  },
  {
    "id": "fdda9a40f575ea5f",
    "type": "debug",
    "z": "a8bf5810905e996f",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 590,
    "y": 560,
    "wires": []
  },
  {
    "id": "bbaec9c81c54080f",
    "type": "comment",
    "z": "a8bf5810905e996f",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 180,
    "y": 480,
    "wires": []
  },
  {
    "id": "4fa2cc2a37baa34f",
    "type": "link out",
    "z": "a8bf5810905e996f",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1035,
    "y": 520,
    "wires": []
  },
  {
    "id": "100e094324498584",
    "type": "comment",
    "z": "a8bf5810905e996f",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 980,
    "y": 480,
    "wires": []
  },
  {
    "id": "7ef76bae22653016",
    "type": "function",
    "z": "a8bf5810905e996f",
    "name": "",
    "func": "msg.bucket = \"Open-Data-Neuss\"\nmsg.flow = \"E-Mobilität, Ladestationen im Fläming\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 940,
    "y": 520,
    "wires": [["4fa2cc2a37baa34f"]]
  },
  {
    "id": "6c965d3c72495f02",
    "type": "http request",
    "z": "f9b3b25533ec7975",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/Energieagentur%20Brandenburg/{{measurement}}.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 430,
    "y": 260,
    "wires": [["b4a20d9ce070bc11"]]
  },
  {
    "id": "b4a20d9ce070bc11",
    "type": "csv",
    "z": "f9b3b25533ec7975",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 630,
    "y": 260,
    "wires": [["5f27f5d7a126cc3f"]]
  },
  {
    "id": "c45fd74982048715",
    "type": "debug",
    "z": "f9b3b25533ec7975",
    "name": "debug",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 990,
    "y": 200,
    "wires": []
  },
  {
    "id": "5f27f5d7a126cc3f",
    "type": "function",
    "z": "f9b3b25533ec7975",
    "name": "",
    "func": "const items = msg.payload\nconst measurement = msg.measurement\n\nmsg.payload = items.map((item) => {\n    const date = item.jahr + \"-12-31\"\n    const timestamp = new Date(date).valueOf()\n    \n    // create an empty object to store the transformed values\n    const transformedItem = {};\n    // loop over the item's keys and values\n    for (const [key, value] of Object.entries(item)) {\n        // check if the current value is a string that represents a number\n        if (typeof value === 'string' && !isNaN(value.replace(',', '.'))) {\n            // if it is, convert it to a float and store it in the corresponding key of the new object\n            transformedItem[key] = parseFloat(value.replace(',', '.'));\n        } else {\n            // if it is not, store the value unchanged in the corresponding key of the new object\n            transformedItem[key] = value;\n        }\n    }\n\n    return {\n        fields: {\n            ...transformedItem\n        },\n        tags: {\n            gemeinde: item.gemeinde,\n            typ: item.typ,\n            schluessel: item.schluessel,\n            landkreis: item.landkreis,\n            landkreis_id: item.landkreis_id,\n            region: item.region,\n            region_id: item.region_id\n        },\n        measurement,\n        timestamp\n    }\n})\n\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 260,
    "wires": [["c45fd74982048715", "f6c41056b76afb44", "64679a5d510ced36"]]
  },
  {
    "id": "f6c41056b76afb44",
    "type": "influxdb batch",
    "z": "f9b3b25533ec7975",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Energieagentur-Brandenburg",
    "x": 1020,
    "y": 320,
    "wires": []
  },
  {
    "id": "513e6f1c0dc91e2d",
    "type": "http in",
    "z": "f9b3b25533ec7975",
    "name": "",
    "url": "/api/v1/import/energiesteckbriefe",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 210,
    "y": 60,
    "wires": [["5d594fe1e2af890e", "10caeac2d9df6909", "4ce3309266a44e19"]]
  },
  {
    "id": "0933ae75ae20335d",
    "type": "array-loop",
    "z": "f9b3b25533ec7975",
    "name": "loop über filenames",
    "key": "filenames_index",
    "keyType": "msg",
    "reset": true,
    "resetValue": "value-null",
    "array": "filenames",
    "arrayType": "msg",
    "x": 190,
    "y": 200,
    "wires": [["d43d4c5363f1ad45"], ["50bfd84717b5a4be"]]
  },
  {
    "id": "5d594fe1e2af890e",
    "type": "debug",
    "z": "f9b3b25533ec7975",
    "name": "api",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 60,
    "wires": []
  },
  {
    "id": "3dcaf2d83923e886",
    "type": "debug",
    "z": "f9b3b25533ec7975",
    "name": "file",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 320,
    "wires": []
  },
  {
    "id": "50bfd84717b5a4be",
    "type": "function",
    "z": "f9b3b25533ec7975",
    "name": "measurement",
    "func": "msg.timestamp = new Date().valueOf()\nmsg.measurement = msg.payload\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 200,
    "y": 280,
    "wires": [["6c965d3c72495f02", "0933ae75ae20335d", "3dcaf2d83923e886"]]
  },
  {
    "id": "10caeac2d9df6909",
    "type": "http response",
    "z": "f9b3b25533ec7975",
    "name": "",
    "statusCode": "200",
    "headers": {},
    "x": 540,
    "y": 120,
    "wires": []
  },
  {
    "id": "4ce3309266a44e19",
    "type": "function",
    "z": "f9b3b25533ec7975",
    "name": "filenames",
    "func": "msg.filenames = msg.payload.filenames;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 160,
    "y": 120,
    "wires": [["0933ae75ae20335d"]]
  },
  {
    "id": "d43d4c5363f1ad45",
    "type": "debug",
    "z": "f9b3b25533ec7975",
    "name": "ende",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 180,
    "wires": []
  },
  {
    "id": "f3992c3a5a8bbe1c",
    "type": "catch",
    "z": "f9b3b25533ec7975",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 500,
    "wires": [["89e62188a3589806"]]
  },
  {
    "id": "532bb545b5c35007",
    "type": "influxdb batch",
    "z": "f9b3b25533ec7975",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 500,
    "wires": []
  },
  {
    "id": "89e62188a3589806",
    "type": "function",
    "z": "f9b3b25533ec7975",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Energieagentur-Brandenburg\",\n    fields: {\n        bucket: \"Energieagentur-Brandenburg\",\n        flow: \"Energiesteckbriefe\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 500,
    "wires": [["532bb545b5c35007", "b62c11c852b6100b"]]
  },
  {
    "id": "b62c11c852b6100b",
    "type": "debug",
    "z": "f9b3b25533ec7975",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 540,
    "wires": []
  },
  {
    "id": "399170182d5789c7",
    "type": "comment",
    "z": "f9b3b25533ec7975",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 460,
    "wires": []
  },
  {
    "id": "74cb08ce216ddcb1",
    "type": "link out",
    "z": "f9b3b25533ec7975",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1075,
    "y": 500,
    "wires": []
  },
  {
    "id": "e4e88c99dd21aab4",
    "type": "comment",
    "z": "f9b3b25533ec7975",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1020,
    "y": 460,
    "wires": []
  },
  {
    "id": "64679a5d510ced36",
    "type": "function",
    "z": "f9b3b25533ec7975",
    "name": "",
    "func": "msg.bucket = \"Energieagentur-Brandenburg\"\nmsg.flow = \"Energiesteckbriefe\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 980,
    "y": 500,
    "wires": [["74cb08ce216ddcb1"]]
  },
  {
    "id": "eabc259ebbfde991",
    "type": "influxdb batch",
    "z": "3905b1242c272069",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "LGB",
    "x": 1020,
    "y": 320,
    "wires": []
  },
  {
    "id": "553594b3d4361ef4",
    "type": "http request",
    "z": "3905b1242c272069",
    "name": "",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/Landesvermessung%20und%20Geobasisinformation%20Brandenburg/{{measurement}}.json",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 430,
    "y": 260,
    "wires": [["378319d28c84ea6b"]]
  },
  {
    "id": "8c68be4c575463a4",
    "type": "http in",
    "z": "3905b1242c272069",
    "name": "",
    "url": "/api/v1/import/lgb",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 170,
    "y": 60,
    "wires": [["69bd9957dac8d096", "2edcf06e38c1ed75", "16c6c9e7dc359b93"]]
  },
  {
    "id": "e2d02e175347a15a",
    "type": "array-loop",
    "z": "3905b1242c272069",
    "name": "loop über filenames",
    "key": "filenames_index",
    "keyType": "msg",
    "reset": true,
    "resetValue": "value-null",
    "array": "filenames",
    "arrayType": "msg",
    "x": 190,
    "y": 200,
    "wires": [["fe0118715fee171f"], ["e8aaad4ce28b503e"]]
  },
  {
    "id": "69bd9957dac8d096",
    "type": "debug",
    "z": "3905b1242c272069",
    "name": "api",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 60,
    "wires": []
  },
  {
    "id": "9929f54579781444",
    "type": "debug",
    "z": "3905b1242c272069",
    "name": "file",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 320,
    "wires": []
  },
  {
    "id": "e8aaad4ce28b503e",
    "type": "function",
    "z": "3905b1242c272069",
    "name": "measurement",
    "func": "msg.timestamp = new Date().valueOf()\nmsg.measurement = msg.payload\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 200,
    "y": 280,
    "wires": [["553594b3d4361ef4", "e2d02e175347a15a", "9929f54579781444"]]
  },
  {
    "id": "2edcf06e38c1ed75",
    "type": "http response",
    "z": "3905b1242c272069",
    "name": "",
    "statusCode": "200",
    "headers": {},
    "x": 540,
    "y": 120,
    "wires": []
  },
  {
    "id": "16c6c9e7dc359b93",
    "type": "function",
    "z": "3905b1242c272069",
    "name": "filenames",
    "func": "msg.filenames = msg.payload.filenames;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 160,
    "y": 120,
    "wires": [["e2d02e175347a15a"]]
  },
  {
    "id": "fe0118715fee171f",
    "type": "debug",
    "z": "3905b1242c272069",
    "name": "ende",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 180,
    "wires": []
  },
  {
    "id": "55a231dbc2dc62cb",
    "type": "catch",
    "z": "3905b1242c272069",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 500,
    "wires": [["f34a232e43036234"]]
  },
  {
    "id": "846222b599ccc653",
    "type": "influxdb batch",
    "z": "3905b1242c272069",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 500,
    "wires": []
  },
  {
    "id": "f34a232e43036234",
    "type": "function",
    "z": "3905b1242c272069",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"LGB\",\n    fields: {\n        bucket: \"LGB\",\n        flow: \"Windkraftanlagen in BB\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 500,
    "wires": [["846222b599ccc653", "52eb04fd98dc6999"]]
  },
  {
    "id": "52eb04fd98dc6999",
    "type": "debug",
    "z": "3905b1242c272069",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 540,
    "wires": []
  },
  {
    "id": "5a17204ef16ad561",
    "type": "comment",
    "z": "3905b1242c272069",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 460,
    "wires": []
  },
  {
    "id": "41dc20872e3692c8",
    "type": "debug",
    "z": "3905b1242c272069",
    "name": "debug",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 990,
    "y": 200,
    "wires": []
  },
  {
    "id": "378319d28c84ea6b",
    "type": "function",
    "z": "3905b1242c272069",
    "name": "",
    "func": "const items = msg.payload.features\n\nmsg.payload = items.map((item) => {\n    return {\n        fields: {\n            ...item.properties,\n            latitude: item.geometry.coordinates[1],\n            longitude: item.geometry.coordinates[0]\n        },\n        tags: {\n            betreiber: item.properties.betreiber,\n            geme_kenn: item.properties.geme_kenn,\n            kreis: item.properties.kreis,\n            ort: item.properties.ort,\n            status: item.properties.status\n        },\n        measurement: msg.measurement,\n        timestamp: msg.timestamp\n    }\n})\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 260,
    "wires": [["41dc20872e3692c8", "684357179e38677b", "eabc259ebbfde991"]]
  },
  {
    "id": "6a501e8f182de8ba",
    "type": "link out",
    "z": "3905b1242c272069",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1075,
    "y": 500,
    "wires": []
  },
  {
    "id": "a31394207b6884f9",
    "type": "comment",
    "z": "3905b1242c272069",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1020,
    "y": 460,
    "wires": []
  },
  {
    "id": "684357179e38677b",
    "type": "function",
    "z": "3905b1242c272069",
    "name": "",
    "func": "msg.bucket = \"LGB\"\nmsg.flow = \"Windkraftanlagen in BB\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 980,
    "y": 500,
    "wires": [["6a501e8f182de8ba"]]
  },
  {
    "id": "3b73a72e59687014",
    "type": "influxdb batch",
    "z": "d04948c7acfc2e3d",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Waldzustandsbericht",
    "x": 1260,
    "y": 220,
    "wires": []
  },
  {
    "id": "d9ee333b99ab08fe",
    "type": "link out",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1315,
    "y": 400,
    "wires": []
  },
  {
    "id": "2637e0f3fed5b360",
    "type": "function",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "func": "msg.bucket = \"Waldzustandsbericht\"\nmsg.flow = \"Waldzustandsbericht\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1220,
    "y": 400,
    "wires": [["d9ee333b99ab08fe"]]
  },
  {
    "id": "9bf50df81711f44e",
    "type": "http request",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/Forst%20Brandenburg/{{filename}}.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 430,
    "y": 260,
    "wires": [["fffab0173be4e89a"]]
  },
  {
    "id": "fffab0173be4e89a",
    "type": "csv",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 630,
    "y": 260,
    "wires": [["bd11b1efc77a85d9"]]
  },
  {
    "id": "e18741593a19bd11",
    "type": "debug",
    "z": "d04948c7acfc2e3d",
    "name": "debug",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1230,
    "y": 100,
    "wires": []
  },
  {
    "id": "b66e8f596d23509b",
    "type": "function",
    "z": "d04948c7acfc2e3d",
    "name": "function Schadstufen",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\n// transform data with adding measurement and timestamp\nmsg.payload.forEach(item => {\n    const year = item[\"Jahr\"]\n\n    // Get the timestamp from a new Date object with the year\n    const timestamp = new Date(year, 0, 1).valueOf()\n\n    const s = {\n        fields: {\n            \"Baumart\": item[\"Baumart\"],\n            \"Schadstufe 0\": item[\"Schadstufe 0\"],\n            \"Schadstufe 1\": item[\"Schadstufe 1\"],\n            \"Schadstufe 2-4\": item[\"Schadstufe 2-4\"],\n        },\n        tags: {\n            \"Baumart\": item[\"Baumart\"]\n        },\n        measurement,\n        timestamp\n    }\n    data_to_return.push(s)\n})\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 980,
    "y": 180,
    "wires": [["e18741593a19bd11", "3b73a72e59687014", "2637e0f3fed5b360"]]
  },
  {
    "id": "4d2590d74db90384",
    "type": "http in",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "url": "/api/v1/import/forst-brandenburg",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 210,
    "y": 60,
    "wires": [["e68031d3aed41969", "315f574e6aa625c8", "10b260254a6ea9c3"]]
  },
  {
    "id": "33a535a2211c8367",
    "type": "array-loop",
    "z": "d04948c7acfc2e3d",
    "name": "loop über filenames",
    "key": "filenames_index",
    "keyType": "msg",
    "reset": true,
    "resetValue": "value-null",
    "array": "filenames",
    "arrayType": "msg",
    "x": 190,
    "y": 200,
    "wires": [["2da3045608e0426a"], ["aa3acfd12bf64040"]]
  },
  {
    "id": "e68031d3aed41969",
    "type": "debug",
    "z": "d04948c7acfc2e3d",
    "name": "api",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 60,
    "wires": []
  },
  {
    "id": "723e460e6b55f292",
    "type": "debug",
    "z": "d04948c7acfc2e3d",
    "name": "file",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 320,
    "wires": []
  },
  {
    "id": "aa3acfd12bf64040",
    "type": "function",
    "z": "d04948c7acfc2e3d",
    "name": "measurement & filename",
    "func": "msg.filename = msg.payload\nmsg.measurement = msg.filename.includes(\"schadstufen\") ? \"Schadstufen\" : \"Kronenverlichtung\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 190,
    "y": 280,
    "wires": [["9bf50df81711f44e", "33a535a2211c8367", "723e460e6b55f292"]]
  },
  {
    "id": "315f574e6aa625c8",
    "type": "http response",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "statusCode": "200",
    "headers": {},
    "x": 540,
    "y": 120,
    "wires": []
  },
  {
    "id": "10b260254a6ea9c3",
    "type": "function",
    "z": "d04948c7acfc2e3d",
    "name": "filenames",
    "func": "msg.filenames = msg.payload.filenames;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 160,
    "y": 120,
    "wires": [["33a535a2211c8367"]]
  },
  {
    "id": "2da3045608e0426a",
    "type": "debug",
    "z": "d04948c7acfc2e3d",
    "name": "ende",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 180,
    "wires": []
  },
  {
    "id": "913a785504138051",
    "type": "catch",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 500,
    "wires": [["3ce97043c20da2b4"]]
  },
  {
    "id": "a43f9737973f42b0",
    "type": "influxdb batch",
    "z": "d04948c7acfc2e3d",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 500,
    "wires": []
  },
  {
    "id": "3ce97043c20da2b4",
    "type": "function",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Waldzustandsbericht\",\n    fields: {\n        bucket: \"Waldzustandsbericht\",\n        flow: \"Waldzustandsbericht\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 500,
    "wires": [["a43f9737973f42b0", "ccf29645e8cabaf6"]]
  },
  {
    "id": "ccf29645e8cabaf6",
    "type": "debug",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 540,
    "wires": []
  },
  {
    "id": "d11d9902609a7281",
    "type": "comment",
    "z": "d04948c7acfc2e3d",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 460,
    "wires": []
  },
  {
    "id": "634c9c9b09ed21b1",
    "type": "comment",
    "z": "d04948c7acfc2e3d",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1260,
    "y": 360,
    "wires": []
  },
  {
    "id": "965a29ee0ca1893b",
    "type": "function",
    "z": "d04948c7acfc2e3d",
    "name": "function Kronenverlichtung",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\n// transform data with adding measurement and timestamp\nmsg.payload.forEach(item => {\n    const year = item[\"Jahr\"]\n\n    // Get the timestamp from a new Date object with the year\n    const timestamp = new Date(year, 0, 1).valueOf()\n\n    const s = {\n        fields: {\n            \"Kronenverlichtung\": item[\"Kronenverlichtung\"],\n        },\n        tags: {\n        },\n        measurement,\n        timestamp\n    }\n    data_to_return.push(s)\n})\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 980,
    "y": 300,
    "wires": [["e18741593a19bd11", "3b73a72e59687014", "2637e0f3fed5b360"]]
  },
  {
    "id": "bd11b1efc77a85d9",
    "type": "switch",
    "z": "d04948c7acfc2e3d",
    "name": "",
    "property": "measurement",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "Schadstufen",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "Kronenverlichtung",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 790,
    "y": 260,
    "wires": [["b66e8f596d23509b"], ["965a29ee0ca1893b"]]
  },
  {
    "id": "9b064248b128b25e",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "flaemingdragino1@ttn",
    "topic": "v3/flaemingdragino1@ttn/devices/eui-a84041f6e184a0e1/#",
    "qos": "2",
    "datatype": "json",
    "broker": "702eb618aab07ca7",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 165,
    "y": 160,
    "wires": [["12c4ec9d61763a50", "e1840d6618326f0d"]],
    "l": false
  },
  {
    "id": "e1840d6618326f0d",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "\nvar data = msg.payload.uplink_message.decoded_payload\n\nmsg.payload = {\n    'Bodentemperatur': data.BT1 * 1, // Lufttemperatur\n    'Bodenfeuchte 10cm': data.BF1 * 1, // Bodenfeuchte A\n    'Bodenfeuchte 30cm': data.BF3 * 1, // Bodenfeuchte B\n    'Batterie': data.BAT * 1, // Batteriespannung\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 510,
    "y": 160,
    "wires": [["06bf6bde959a3cd3", "40e9986cc56f4c4e"]]
  },
  {
    "id": "40e9986cc56f4c4e",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Schlamauer-Sandhügel",
    "measurement": "Schlamauer Sandhügel",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 910,
    "y": 160,
    "wires": []
  },
  {
    "id": "12c4ec9d61763a50",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 390,
    "y": 100,
    "wires": []
  },
  {
    "id": "06bf6bde959a3cd3",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 910,
    "y": 80,
    "wires": []
  },
  {
    "id": "656eda37d3e86675",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "v3/flaemingdragino@ttn",
    "topic": "v3/flaemingdragino@ttn/devices/eui-a84041f6e184a0e1/#",
    "qos": "2",
    "datatype": "json",
    "broker": "fb56bec2827ceb7f",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 205,
    "y": 1400,
    "wires": [["748aab046c5154df", "12fbeecc5a892cd1"]],
    "l": false
  },
  {
    "id": "95c3762a8deaae58",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Arensnest-Hausweide",
    "measurement": "Arensnest-Hausweide",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 960,
    "y": 1400,
    "wires": []
  },
  {
    "id": "748aab046c5154df",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 400,
    "y": 1340,
    "wires": []
  },
  {
    "id": "74eaf7109b030936",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 920,
    "y": 1320,
    "wires": []
  },
  {
    "id": "12fbeecc5a892cd1",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "\nvar data = msg.payload.uplink_message.decoded_payload\n\nmsg.payload = {\n    'Bodentemperatur': data.temp_SOIL * 1,\n    'Bodenfeuchte 10cm': data.water_SOIL * 1,\n    'Batterie': data.BatV * 1, // Batteriespannung\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 1400,
    "wires": [["74eaf7109b030936", "95c3762a8deaae58"]]
  },
  {
    "id": "866334eeface614d",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "miniuni@ttn",
    "topic": "v3/miniuni@ttn/devices/eui-8cf957200008990d/#",
    "qos": "2",
    "datatype": "json",
    "broker": "fb56bec2827ceb7f",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 205,
    "y": 1600,
    "wires": [["f2db33f90d24384e", "5392593aecf88cc9"]],
    "l": false
  },
  {
    "id": "14c20a8687193136",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Schlamau-Weide",
    "measurement": "Schlamauer Weide",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 950,
    "y": 1600,
    "wires": []
  },
  {
    "id": "f2db33f90d24384e",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 400,
    "y": 1540,
    "wires": []
  },
  {
    "id": "97dd19b0a7923703",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 920,
    "y": 1520,
    "wires": []
  },
  {
    "id": "5392593aecf88cc9",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "\nvar data = msg.payload.uplink_message.decoded_payload\n\nmsg.payload = {\n    'Bodenfeuchte 10cm': data.BF1 * 1,\n    'Bodenfeuchte 30cm': data.BF3 * 1,\n    'Bodenfeuchte 60cm': data.BF6 * 1,\n    'Bodenfeuchte 99cm': data.BF10 * 1,\n    'Bodentemperatur 10cm': data.BT1 * 1,\n    'Bodentemperatur 30cm': data.BT3 * 1,\n    'Bodentemperatur 60cm': data.BT6 * 1,\n    'Bodentemperatur 99cm': data.BT10 * 1,\n    'Batterie': data.VBat * 1,\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 1600,
    "wires": [["97dd19b0a7923703", "14c20a8687193136"]]
  },
  {
    "id": "e0e1a212f3f51ffe",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Dragino LSN50/DVS",
    "info": "**DVS Sensor (analog): **\nDragino LSN50 mit 2 Trübner SMT50",
    "x": 150,
    "y": 120,
    "wires": []
  },
  {
    "id": "ed3b0c37787fd698",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Dragino LSE01",
    "info": "Dragino LSE01 (analog) mit China Sensor",
    "x": 180,
    "y": 1340,
    "wires": []
  },
  {
    "id": "d94d780a0bafee2e",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "miniUNI",
    "info": "miniUNI (SDI12 via Modbusprotokoll)\nmit 4 Trübner SMT100",
    "x": 180,
    "y": 1560,
    "wires": []
  },
  {
    "id": "2ce8979ef50d1ab9",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "v3/miniuni@ttn",
    "topic": "v3/miniuni@ttn/devices/eui-8cf9572000089a0c/#",
    "qos": "2",
    "datatype": "json",
    "broker": "fb56bec2827ceb7f",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 205,
    "y": 1760,
    "wires": [["a3a70de78429097f", "38e7948dd415716e"]],
    "l": false
  },
  {
    "id": "8fe4b20f75018b99",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Belziger Landschaftswiese",
    "measurement": "belziger-landschaftswiese",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 980,
    "y": 1760,
    "wires": []
  },
  {
    "id": "a3a70de78429097f",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 400,
    "y": 1700,
    "wires": []
  },
  {
    "id": "e9ec375b397781a0",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 920,
    "y": 1680,
    "wires": []
  },
  {
    "id": "38e7948dd415716e",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "\nvar data = msg.payload.uplink_message.decoded_payload\n\nmsg.payload = {\n    'Bodenfeuchte 10cm': data.BF1 * 1,\n    'Bodenfeuchte 30cm': data.BF3 * 1,\n    'Bodenfeuchte 60cm': data.BF6 * 1,\n    'Bodenfeuchte 99cm': data.BF10 * 1,\n    'Bodentemperatur 10cm': data.BT1 * 1,\n    'Bodentemperatur 30cm': data.BT3 * 1,\n    'Bodentemperatur 60cm': data.BT6 * 1,\n    'Bodentemperatur 99cm': data.BT10 * 1,\n    'Batterie': data.VBat * 1,\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 1760,
    "wires": [["e9ec375b397781a0", "8fe4b20f75018b99"]]
  },
  {
    "id": "f48c624692ee7119",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "miniUNI",
    "info": "miniUNI (SDI12 via Modbusprotokoll)\nmit 4 Trübner SMT100",
    "x": 180,
    "y": 1720,
    "wires": []
  },
  {
    "id": "6c96996379a2f553",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "v3/miniuni@ttn",
    "topic": "v3/miniuni@ttn/deviceseui-8cf9572000089942/#",
    "qos": "2",
    "datatype": "json",
    "broker": "fb56bec2827ceb7f",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 205,
    "y": 1900,
    "wires": [["18700ebfc8a4d796", "31afe81f74ec6201"]],
    "l": false
  },
  {
    "id": "9902c6604189c2d4",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Maisacker",
    "measurement": "Maisacker",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 930,
    "y": 1900,
    "wires": []
  },
  {
    "id": "18700ebfc8a4d796",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 400,
    "y": 1840,
    "wires": []
  },
  {
    "id": "22af29ccde4e568c",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 920,
    "y": 1820,
    "wires": []
  },
  {
    "id": "31afe81f74ec6201",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "\nvar data = msg.payload.uplink_message.decoded_payload\n\nmsg.payload = {\n    'Bodenfeuchte 30cm': data.BF1 * 1,\n    'Bodenfeuchte 60cm': data.BF3 * 1,\n    'Bodenfeuchte 80cm': data.BF6 * 1,\n    'Bodenfeuchte 99cm': data.BF10 * 1,\n    'Bodentemperatur 30cm': data.BT1 * 1,\n    'Bodentemperatur 60cm': data.BT3 * 1,\n    'Bodentemperatur 80cm': data.BT6 * 1,\n    'Bodentemperatur 99cm': data.BT10 * 1,\n    'Batterie': data.VBat * 1,\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 1900,
    "wires": [["22af29ccde4e568c", "9902c6604189c2d4"]]
  },
  {
    "id": "aa1da59d5808d9a9",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "miniUNI",
    "info": "miniUNI (SDI12 via Modbusprotokoll)\nmit 4 Trübner SMT100",
    "x": 180,
    "y": 1860,
    "wires": []
  },
  {
    "id": "4da49a4959524fba",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "v3/fredersdorf-flaeming@ttn",
    "topic": "v3/fredersdorf-flaeming@ttn/devices/eui-a84041caf184a0b1/#",
    "qos": "2",
    "datatype": "json",
    "broker": "c99d98fdebee0ee0",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 165,
    "y": 1040,
    "wires": [["08e211052bd39fa2", "b7565bd104a3ab58"]],
    "l": false
  },
  {
    "id": "b7565bd104a3ab58",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "const data = msg.payload.uplink_message.decoded_payload;\n\n// Get the timestamp from now\nconst timestamp = new Date().valueOf()\n\nmsg.payload = {\n    fields: {\n        'Lufttemperatur': data.BT1 * 1, // Lufttemperatur\n        'Bodenfeuchte 10cm': data.BF1 * 1, // Bodenfeuchte A\n        'Bodenfeuchte 30cm': data.BF3 * 1, // Bodenfeuchte B\n    },\n    tags: {\n    },\n    timestamp\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 510,
    "y": 1040,
    "wires": [["bf8fd4fd7ee9dbe4", "460b11ed4cabc929"]]
  },
  {
    "id": "460b11ed4cabc929",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Belziger Landschaftswiese/Stau",
    "measurement": "Belziger Landschaftswiese/Stau",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 930,
    "y": 1040,
    "wires": []
  },
  {
    "id": "08e211052bd39fa2",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 390,
    "y": 980,
    "wires": []
  },
  {
    "id": "bf8fd4fd7ee9dbe4",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 910,
    "y": 960,
    "wires": []
  },
  {
    "id": "ecffa507eb930ebb",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Dragino LSN50/DVS",
    "info": "**DVS Sensor (analog): **\nDragino LSN50 mit 2 Trübner SMT50",
    "x": 150,
    "y": 1000,
    "wires": []
  },
  {
    "id": "5d8b5dc94611b1c5",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "v3/fredersdorf-flaeming@ttn",
    "topic": "v3/fredersdorf-flaeming@ttn/devices/eui-a84041315184a104/#",
    "qos": "2",
    "datatype": "json",
    "broker": "c99d98fdebee0ee0",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 165,
    "y": 1180,
    "wires": [["7bfd99c0c613dfe1", "93855bac170f13be"]],
    "l": false
  },
  {
    "id": "93855bac170f13be",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "const data = msg.payload.uplink_message.decoded_payload;\n\n// Get the timestamp from now\nconst timestamp = new Date().valueOf()\n\nmsg.payload = {\n    fields: {\n        'Lufttemperatur': data.BT1 * 1, // Lufttemperatur\n        'Bodenfeuchte 10cm': data.BF1 * 1, // Bodenfeuchte A\n        'Bodenfeuchte 30cm': data.BF3 * 1, // Bodenfeuchte B\n    },\n    tags: {\n    },\n    timestamp\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 510,
    "y": 1180,
    "wires": [["f376f74247278299", "d3658d52b9c527b6"]]
  },
  {
    "id": "d3658d52b9c527b6",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Belziger Landschaftswiese/Mitte",
    "measurement": "Belziger Landschaftswiese/Mitte",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 930,
    "y": 1180,
    "wires": []
  },
  {
    "id": "7bfd99c0c613dfe1",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 390,
    "y": 1120,
    "wires": []
  },
  {
    "id": "f376f74247278299",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 910,
    "y": 1100,
    "wires": []
  },
  {
    "id": "54da4bacdfe43f74",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Dragino LSN50/DVS",
    "info": "**DVS Sensor (analog): **\nDragino LSN50 mit 2 Trübner SMT50",
    "x": 150,
    "y": 1140,
    "wires": []
  },
  {
    "id": "2fd45c2900b25182",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "v3/fredersdorf-flaeming@ttn",
    "topic": "v3/fredersdorf-flaeming@ttn/devices/eui-a84041e1c184a0a7/#",
    "qos": "2",
    "datatype": "json",
    "broker": "c99d98fdebee0ee0",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 165,
    "y": 920,
    "wires": [["dae438c40901ebe8", "3c430e5808fe3787"]],
    "l": false
  },
  {
    "id": "3c430e5808fe3787",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "const data = msg.payload.uplink_message.decoded_payload;\n\n// Get the timestamp from now\nconst timestamp = new Date().valueOf()\n\nmsg.payload = {\n    fields: {\n        'Lufttemperatur': data.T1 * 1, // Lufttemperatur\n        'BodenfeuchteA (10cm)': data.BT1 * 1, // Bodenfeuchte A\n        'BodenfeuchteB (10cm)': data.BT2 * 1, // Bodenfeuchte B\n        'Bodenfeuchte 10cm': ((data.BT1 + data.BT2) / 2) * 1, // Durchschnitt\n    },\n    tags: {\n    },\n    timestamp\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 510,
    "y": 920,
    "wires": [["5ee1ca44df5dad94", "f7cfb48184dfc339"]]
  },
  {
    "id": "f7cfb48184dfc339",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Maisacker",
    "measurement": "Maisacker",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 910,
    "y": 900,
    "wires": []
  },
  {
    "id": "dae438c40901ebe8",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 390,
    "y": 860,
    "wires": []
  },
  {
    "id": "5ee1ca44df5dad94",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 910,
    "y": 840,
    "wires": []
  },
  {
    "id": "8738b7e1bfb615c1",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Dragino LSN50/DVS",
    "info": "**DVS Sensor (analog): **\nDragino LSN50 mit 2 Trübner SMT50",
    "x": 150,
    "y": 880,
    "wires": []
  },
  {
    "id": "e59f2d0559dcbaaa",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Application ID: flaemingdragino1 - alle 60 Minuten",
    "info": "",
    "x": 260,
    "y": 60,
    "wires": []
  },
  {
    "id": "11a215654f96d402",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "kartoffel1/mM",
    "topic": "v3/flaemingdragino1@ttn/devices/eui-a84041d43184a0ed/#",
    "qos": "2",
    "datatype": "json",
    "broker": "702eb618aab07ca7",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 135,
    "y": 340,
    "wires": [["789321833ac32359", "30728c24f1167af1"]],
    "l": false
  },
  {
    "id": "30728c24f1167af1",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "\nvar data = msg.payload.uplink_message.decoded_payload\n\nmsg.payload = {\n    'Bodentemperatur': data.BT1 * 1, // Lufttemperatur\n    'Bodenfeuchte 10cm': data.BF1 * 1, // Bodenfeuchte A\n    'Bodenfeuchte 30cm': data.BF3 * 1, // Bodenfeuchte B\n    'Batterie': data.BAT * 1, // Batteriespannung\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 480,
    "y": 340,
    "wires": [["d5918248166df3dd", "2d8f9cdee2011082"]]
  },
  {
    "id": "2d8f9cdee2011082",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Kartoffel1 (Schlamau)",
    "measurement": "Kartoffel1",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 870,
    "y": 340,
    "wires": []
  },
  {
    "id": "789321833ac32359",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 360,
    "y": 280,
    "wires": []
  },
  {
    "id": "d5918248166df3dd",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 880,
    "y": 260,
    "wires": []
  },
  {
    "id": "6c0734e927902a42",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Dragino LSN50/DVS",
    "info": "**DVS Sensor (analog): **\nDragino LSN50 mit 2 Trübner SMT50",
    "x": 120,
    "y": 300,
    "wires": []
  },
  {
    "id": "84bea049f48cfaff",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "v3/flaemingdragino1@ttn",
    "topic": "v3/flaemingdragino1@ttn/devices/eui-a84041fb9184a0f8/#",
    "qos": "2",
    "datatype": "json",
    "broker": "702eb618aab07ca7",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 155,
    "y": 480,
    "wires": [["913b728c3fb3e46b", "0995e9413bb45c0b"]],
    "l": false
  },
  {
    "id": "0995e9413bb45c0b",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "\nvar data = msg.payload.uplink_message.decoded_payload\n\nmsg.payload = {\n    'Bodentemperatur': data.BT1 * 1, // Lufttemperatur\n    'Bodenfeuchte 10cm': data.BF1 * 1, // Bodenfeuchte A\n    'Bodenfeuchte 30cm': data.BF3 * 1, // Bodenfeuchte B\n    'Batterie': data.BAT * 1, // Batteriespannung\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 500,
    "y": 480,
    "wires": [["ea5f6d2522b1b97a", "0b3a9bede92fd23e"]]
  },
  {
    "id": "0b3a9bede92fd23e",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "Kartoffel2 (Schlamau)",
    "measurement": "Kartoffel2",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 890,
    "y": 480,
    "wires": []
  },
  {
    "id": "913b728c3fb3e46b",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 380,
    "y": 420,
    "wires": []
  },
  {
    "id": "ea5f6d2522b1b97a",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 900,
    "y": 400,
    "wires": []
  },
  {
    "id": "0ab8a5e4fc852af4",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Dragino LSN50/DVS",
    "info": "**DVS Sensor (analog): **\nDragino LSN50 mit 2 Trübner SMT50",
    "x": 140,
    "y": 440,
    "wires": []
  },
  {
    "id": "e99e0b0b6f305634",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Application ID: flaemingdragino - alle 60 Minuten",
    "info": "",
    "x": 180,
    "y": 1280,
    "wires": []
  },
  {
    "id": "1726b0414aa74dd1",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Application ID: MINIuni - alle 60 Minuten",
    "info": "",
    "x": 180,
    "y": 1480,
    "wires": []
  },
  {
    "id": "ef894138e5c6be55",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "Application ID: fredersdorf-flaeming - alle 60 Minuten",
    "info": "",
    "x": 220,
    "y": 620,
    "wires": []
  },
  {
    "id": "5d41c56d4f8ffca2",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "v3/fredersdorf-flaeming@ttn",
    "topic": "v3/fredersdorf-flaeming@ttn/devices/eui-a84041674184a0e7/#",
    "qos": "2",
    "datatype": "json",
    "broker": "c99d98fdebee0ee0",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 155,
    "y": 760,
    "wires": [["3ff9b764a99b3fce", "73092c4386504590"]],
    "l": false
  },
  {
    "id": "73092c4386504590",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "const data = msg.payload.uplink_message.decoded_payload;\n\n// Get the timestamp from now\nconst timestamp = new Date().valueOf()\n\nmsg.payload = {\n    fields: {\n        'Lufttemperatur': data.T1 * 1, // Lufttemperatur\n        'BodenfeuchteA (10cm)': data.H1 * 1, // Bodenfeuchte A\n        'BodenfeuchteB (10cm)': data.H2 * 1, // Bodenfeuchte B\n        'Bodenfeuchte 10cm': ((data.H1 + data.H2) / 2) * 1, // Durchschnitt\n    },\n    tags: {\n    },\n    timestamp\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 500,
    "y": 760,
    "wires": [["9bcdc985fdd7bf6d", "656425425689278f"]]
  },
  {
    "id": "656425425689278f",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "test",
    "measurement": "test",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 880,
    "y": 740,
    "wires": []
  },
  {
    "id": "3ff9b764a99b3fce",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 380,
    "y": 700,
    "wires": []
  },
  {
    "id": "9bcdc985fdd7bf6d",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 900,
    "y": 680,
    "wires": []
  },
  {
    "id": "5cfbd1841df16e7e",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "TEST",
    "info": "**DVS Sensor (analog): **\nDragino LSN50 mit 2 Trübner SMT50",
    "x": 100,
    "y": 720,
    "wires": []
  },
  {
    "id": "1b0d51e60886e909",
    "type": "mqtt in",
    "z": "7abb33e2da2b104c",
    "name": "v3/miniuni@ttn",
    "topic": "v3/miniuni@ttn/devices/eui-8cf9572000089925/#",
    "qos": "2",
    "datatype": "json",
    "broker": "fb56bec2827ceb7f",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 205,
    "y": 2140,
    "wires": [["6f51b84dfb18a47b", "338c3f6ae40371c9"]],
    "l": false
  },
  {
    "id": "935f4168b78ff1ab",
    "type": "influxdb out",
    "z": "7abb33e2da2b104c",
    "influxdb": "9348e35b70672bec",
    "name": "test",
    "measurement": "test",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn",
    "x": 910,
    "y": 2140,
    "wires": []
  },
  {
    "id": "6f51b84dfb18a47b",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 400,
    "y": 2080,
    "wires": []
  },
  {
    "id": "a85a58f30cb52940",
    "type": "debug",
    "z": "7abb33e2da2b104c",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 920,
    "y": 2060,
    "wires": []
  },
  {
    "id": "338c3f6ae40371c9",
    "type": "function",
    "z": "7abb33e2da2b104c",
    "name": "assign sensor names to values",
    "func": "\nvar data = msg.payload.uplink_message.decoded_payload\n\nmsg.payload = {\n    'Bodenfeuchte 30cm': data.BF1 * 1,\n    'Bodenfeuchte 60cm': data.BF3 * 1,\n    'Bodenfeuchte 80cm': data.BF6 * 1,\n    'Bodenfeuchte 99cm': data.BF10 * 1,\n    'Bodentemperatur 30cm': data.BT1 * 1,\n    'Bodentemperatur 60cm': data.BT3 * 1,\n    'Bodentemperatur 80cm': data.BT6 * 1,\n    'Bodentemperatur 99cm': data.BT10 * 1,\n    'Batterie': data.VBat * 1,\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 2140,
    "wires": [["a85a58f30cb52940", "935f4168b78ff1ab"]]
  },
  {
    "id": "08506555c388c1f2",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "miniUNI TEST",
    "info": "miniUNI (SDI12 via Modbusprotokoll)\nmit 4 Trübner SMT100",
    "x": 200,
    "y": 2100,
    "wires": []
  },
  {
    "id": "bd1d88beb929e24a",
    "type": "comment",
    "z": "7abb33e2da2b104c",
    "name": "FORMAT",
    "info": "Achtung anderes Format!!",
    "x": 580,
    "y": 1360,
    "wires": []
  },
  {
    "id": "763faafb32f6f1d2",
    "type": "http in",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "url": "/api/v1/import/ttn-sensoren",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 200,
    "y": 60,
    "wires": [["513bb676092c9a10", "44dc4239321b5e5e", "1a06af3ddfc15a07"]]
  },
  {
    "id": "513bb676092c9a10",
    "type": "debug",
    "z": "75d3c8ce1dd7c84a",
    "name": "api",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 60,
    "wires": []
  },
  {
    "id": "44dc4239321b5e5e",
    "type": "http response",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "statusCode": "200",
    "headers": {},
    "x": 540,
    "y": 120,
    "wires": []
  },
  {
    "id": "726d859dd0b3c3d7",
    "type": "catch",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 500,
    "wires": [["ab22509636ac862c"]]
  },
  {
    "id": "9d73ce2a3ecefc81",
    "type": "influxdb batch",
    "z": "75d3c8ce1dd7c84a",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 500,
    "wires": []
  },
  {
    "id": "ab22509636ac862c",
    "type": "function",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"ttn-sensoren\",\n    fields: {\n        bucket: \"ttn-sensoren\",\n        flow: \"ttn-sensoren\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 500,
    "wires": [["9d73ce2a3ecefc81", "a636406b1b8630d3"]]
  },
  {
    "id": "a636406b1b8630d3",
    "type": "debug",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 540,
    "wires": []
  },
  {
    "id": "8dc8b1df89ecee03",
    "type": "comment",
    "z": "75d3c8ce1dd7c84a",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 460,
    "wires": []
  },
  {
    "id": "62cb021392ae3841",
    "type": "csv",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 630,
    "y": 260,
    "wires": [["8f63dc27aa267ba0"]]
  },
  {
    "id": "1a06af3ddfc15a07",
    "type": "function",
    "z": "75d3c8ce1dd7c84a",
    "name": "filenames",
    "func": "msg.filenames = msg.payload.filenames;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 160,
    "y": 120,
    "wires": [["404a188fd901d893"]]
  },
  {
    "id": "404a188fd901d893",
    "type": "array-loop",
    "z": "75d3c8ce1dd7c84a",
    "name": "loop über filenames",
    "key": "filenames_index",
    "keyType": "msg",
    "reset": true,
    "resetValue": "value-null",
    "array": "filenames",
    "arrayType": "msg",
    "x": 190,
    "y": 200,
    "wires": [["59ee13e414b285dd"], ["4150e638b83b0abe"]]
  },
  {
    "id": "59ee13e414b285dd",
    "type": "debug",
    "z": "75d3c8ce1dd7c84a",
    "name": "ende",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 180,
    "wires": []
  },
  {
    "id": "4150e638b83b0abe",
    "type": "function",
    "z": "75d3c8ce1dd7c84a",
    "name": "measurement",
    "func": "msg.timestamp = new Date().valueOf()\nmsg.measurement = msg.payload\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 200,
    "y": 280,
    "wires": [["5a18168dc3347e57", "404a188fd901d893", "59a9036a58fbeb40"]]
  },
  {
    "id": "5a18168dc3347e57",
    "type": "http request",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/The%20Things%20Network/{{measurement}}.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 430,
    "y": 260,
    "wires": [["62cb021392ae3841"]]
  },
  {
    "id": "59a9036a58fbeb40",
    "type": "debug",
    "z": "75d3c8ce1dd7c84a",
    "name": "file",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 320,
    "wires": []
  },
  {
    "id": "2555343ce91fa069",
    "type": "debug",
    "z": "75d3c8ce1dd7c84a",
    "name": "debug",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 990,
    "y": 200,
    "wires": []
  },
  {
    "id": "8f63dc27aa267ba0",
    "type": "function",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "func": "const items = msg.payload\nconst measurement = msg.measurement\n\nmsg.dateISO = new Date().toISOString()\nmsg.payload = items.map((item) => {\n    return {\n        fields: {\n            ...item\n        },\n        tags: {\n            device_id: item.device_id\n        },\n        measurement: item.measurement,\n        timestamp: new Date().valueOf()\n    }\n})\n\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 260,
    "wires": [["68f192d4dfc9a880", "d0f1c1f28cf4b504"]]
  },
  {
    "id": "c19656f2402a3a0c",
    "type": "influxdb batch",
    "z": "75d3c8ce1dd7c84a",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn-sensoren",
    "x": 1020,
    "y": 320,
    "wires": []
  },
  {
    "id": "3d74a1b14cc97298",
    "type": "link out",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1075,
    "y": 500,
    "wires": []
  },
  {
    "id": "8f123c1f37ada6fe",
    "type": "comment",
    "z": "75d3c8ce1dd7c84a",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1020,
    "y": 460,
    "wires": []
  },
  {
    "id": "837072c48bf9c2f7",
    "type": "function",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "func": "msg.bucket = \"ttn-sensoren\"\nmsg.flow = \"ttn-sensoren\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 980,
    "y": 500,
    "wires": [["3d74a1b14cc97298"]]
  },
  {
    "id": "076a90e18fe65e22",
    "type": "http request",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://influxdb.bad-belzig.klima-daten.de/api/v2/delete?org=smart-village&bucket={{measurement}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "x": 790,
    "y": 120,
    "wires": [[]]
  },
  {
    "id": "50fe9edcfd1c598c",
    "type": "comment",
    "z": "75d3c8ce1dd7c84a",
    "name": "alle bisherigen Daten aus InfluxDB Bucket löschen",
    "info": "",
    "x": 870,
    "y": 80,
    "wires": []
  },
  {
    "id": "68f192d4dfc9a880",
    "type": "template",
    "z": "75d3c8ce1dd7c84a",
    "name": "body for request",
    "field": "payload",
    "fieldType": "msg",
    "format": "handlebars",
    "syntax": "mustache",
    "template": "{\n  \"start\": \"2023-08-01T00:00:00Z\",\n  \"stop\": \"{{dateISO}}\"\n}",
    "output": "json",
    "x": 800,
    "y": 180,
    "wires": [["076a90e18fe65e22"]]
  },
  {
    "id": "d0f1c1f28cf4b504",
    "type": "delay",
    "z": "75d3c8ce1dd7c84a",
    "name": "",
    "pauseType": "delay",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 800,
    "y": 340,
    "wires": [["837072c48bf9c2f7", "c19656f2402a3a0c", "2555343ce91fa069"]]
  },
  {
    "id": "5ffdf6689566f66f",
    "type": "function",
    "z": "5b4e21c375d11aac",
    "name": "",
    "func": "const { end_device_ids = {}, uplink_message = {}, measurement } = msg.data\nconst { device_id, application_ids = {} } = end_device_ids\nconst { application_id } = application_ids\nconst { decoded_payload = {}, locations = {} } = uplink_message\nconst { user = {} } = locations\nconst { latitude, longitude } = user\n\nconst fields = {}\n\nif (decoded_payload.BT1) fields['Bodentemperatur 10cm'] = decoded_payload.BT1\nif (decoded_payload.BT3) fields['Bodentemperatur 30cm'] = decoded_payload.BT3\nif (decoded_payload.BT6) fields['Bodentemperatur 60cm'] = decoded_payload.BT6\nif (decoded_payload.BT10) fields['Bodentemperatur 99cm'] = decoded_payload.BT10\nif (decoded_payload.BF1) fields['Bodenfeuchte 10cm'] = decoded_payload.BF1\nif (decoded_payload.BF3) fields['Bodenfeuchte 30cm'] = decoded_payload.BF3\nif (decoded_payload.BF6) fields['Bodenfeuchte 60cm'] = decoded_payload.BF6\nif (decoded_payload.BF10) fields['Bodenfeuchte 99cm'] = decoded_payload.BF10\nif (decoded_payload.BAT) fields['Batterie'] = decoded_payload.BAT\nif (decoded_payload.VBat) fields['Batterie'] = decoded_payload.VBat\n\nmsg.payload = [\n  {\n    ...fields,\n    application_id,\n    device_id,\n    latitude,\n    longitude,\n    measurement: measurement || application_id\n  },\n  {\n    device_id\n  }\n]\nmsg.measurement = measurement || application_id\n\nreturn msg",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 680,
    "y": 160,
    "wires": [["b8d420a1594f4343", "7e5a08537b298942", "fb6f79b9acf88d9e"]]
  },
  {
    "id": "7e5a08537b298942",
    "type": "influxdb out",
    "z": "5b4e21c375d11aac",
    "influxdb": "af4e5c9d85dc4b89",
    "name": "ttn-test",
    "measurement": "",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "ttn-test",
    "x": 920,
    "y": 160,
    "wires": []
  },
  {
    "id": "abcd6de0e38d051d",
    "type": "debug",
    "z": "5b4e21c375d11aac",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 450,
    "y": 60,
    "wires": []
  },
  {
    "id": "b8d420a1594f4343",
    "type": "debug",
    "z": "5b4e21c375d11aac",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 910,
    "y": 100,
    "wires": []
  },
  {
    "id": "d2260b5dc256794d",
    "type": "http in",
    "z": "5b4e21c375d11aac",
    "name": "",
    "url": "/api/v1/import/ttn",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 180,
    "y": 60,
    "wires": [["abcd6de0e38d051d", "8e0eb1afe18f142e", "c04658be30a83f8b"]]
  },
  {
    "id": "8e0eb1afe18f142e",
    "type": "http response",
    "z": "5b4e21c375d11aac",
    "name": "",
    "statusCode": "200",
    "headers": {},
    "x": 460,
    "y": 100,
    "wires": []
  },
  {
    "id": "482a8c245e26a497",
    "type": "http request",
    "z": "5b4e21c375d11aac",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://influxdb.bad-belzig.klima-daten.de/api/v2/query?org=smart-village",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "x": 150,
    "y": 240,
    "wires": [["5fd6133d90e3d989"]]
  },
  {
    "id": "3cc0c3672d2f4f74",
    "type": "template",
    "z": "5b4e21c375d11aac",
    "name": "body for request latitude/longitude",
    "field": "payload",
    "fieldType": "msg",
    "format": "handlebars",
    "syntax": "mustache",
    "template": "from(bucket: \"ttn-sensoren\")\n  |> range(start: 2023-08-01T00:00:00Z)\n  |> filter(fn: (r) => r._field == \"latitude\" or r._field == \"longitude\")\n  |> filter(fn: (r) => r.device_id == \"{{data.end_device_ids.device_id}}\")\n  |> last()\n  |> group()",
    "output": "str",
    "x": 220,
    "y": 180,
    "wires": [["482a8c245e26a497"]]
  },
  {
    "id": "89871191defce9a9",
    "type": "debug",
    "z": "5b4e21c375d11aac",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 670,
    "y": 360,
    "wires": []
  },
  {
    "id": "5fd6133d90e3d989",
    "type": "csv",
    "z": "5b4e21c375d11aac",
    "name": "",
    "sep": ",",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 330,
    "y": 240,
    "wires": [["4c1958299566d81b"]]
  },
  {
    "id": "c04658be30a83f8b",
    "type": "function",
    "z": "5b4e21c375d11aac",
    "name": "payload => data & headers for request",
    "func": "msg.data = msg.payload\n\nmsg.headers = {\n    'Content-Type': 'application/vnd.flux'\n}\n\nreturn msg",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 230,
    "y": 120,
    "wires": [["3cc0c3672d2f4f74"]]
  },
  {
    "id": "faec1e221d708839",
    "type": "catch",
    "z": "5b4e21c375d11aac",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 500,
    "wires": [["a2f70caa13ed38a6"]]
  },
  {
    "id": "98d45054f87a0eb0",
    "type": "influxdb batch",
    "z": "5b4e21c375d11aac",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 500,
    "wires": []
  },
  {
    "id": "a2f70caa13ed38a6",
    "type": "function",
    "z": "5b4e21c375d11aac",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"ttn-test\",\n    fields: {\n        bucket: \"ttn-test\",\n        flow: \"ttn-test\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 500,
    "wires": [["98d45054f87a0eb0", "42eb57f519595521"]]
  },
  {
    "id": "42eb57f519595521",
    "type": "debug",
    "z": "5b4e21c375d11aac",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 540,
    "wires": []
  },
  {
    "id": "afa637a94e4ed733",
    "type": "comment",
    "z": "5b4e21c375d11aac",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 460,
    "wires": []
  },
  {
    "id": "7f61b2561eb867c1",
    "type": "link out",
    "z": "5b4e21c375d11aac",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 955,
    "y": 360,
    "wires": []
  },
  {
    "id": "812692db00f7e4b1",
    "type": "comment",
    "z": "5b4e21c375d11aac",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 900,
    "y": 320,
    "wires": []
  },
  {
    "id": "fb6f79b9acf88d9e",
    "type": "function",
    "z": "5b4e21c375d11aac",
    "name": "",
    "func": "msg.bucket = \"ttn-test\"\nmsg.flow = \"ttn-test\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 860,
    "y": 360,
    "wires": [["7f61b2561eb867c1"]]
  },
  {
    "id": "4c1958299566d81b",
    "type": "function",
    "z": "5b4e21c375d11aac",
    "name": "",
    "func": "const hasLocation = msg.data?.uplink_message?.locations\n\nif (msg.payload.length) {\n  const [latitude, longitude] = msg.payload;\n\n  if (!hasLocation && latitude && longitude) {\n    msg.data.uplink_message.locations = { user: {} }\n    msg.data.uplink_message.locations.user['latitude'] = latitude._value\n    msg.data.uplink_message.locations.user['longitude'] = longitude._value\n  }\n}\n\nmsg.headers = {\n  'Content-Type': 'application/vnd.flux'\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 480,
    "y": 240,
    "wires": [["7748b353ca08646f"]]
  },
  {
    "id": "44d34ba4485bba5e",
    "type": "http request",
    "z": "5b4e21c375d11aac",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://influxdb.bad-belzig.klima-daten.de/api/v2/query?org=smart-village",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "x": 150,
    "y": 360,
    "wires": [["afe4a8619ee7a3d5"]]
  },
  {
    "id": "7748b353ca08646f",
    "type": "template",
    "z": "5b4e21c375d11aac",
    "name": "body for request measurement",
    "field": "payload",
    "fieldType": "msg",
    "format": "handlebars",
    "syntax": "mustache",
    "template": "from(bucket: \"ttn-sensoren\")\n  |> range(start: 2023-08-01T00:00:00Z)\n  |> filter(fn: (r) => r._field == \"measurement\")\n  |> filter(fn: (r) => r.device_id == \"{{data.end_device_ids.device_id}}\")\n  |> last()\n  |> group()",
    "output": "str",
    "x": 210,
    "y": 300,
    "wires": [["44d34ba4485bba5e"]]
  },
  {
    "id": "afe4a8619ee7a3d5",
    "type": "csv",
    "z": "5b4e21c375d11aac",
    "name": "",
    "sep": ",",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 330,
    "y": 360,
    "wires": [["fbc3adcaca5118f6"]]
  },
  {
    "id": "fbc3adcaca5118f6",
    "type": "function",
    "z": "5b4e21c375d11aac",
    "name": "",
    "func": "if (msg.payload.length) {\n  const [measurement] = msg.payload;\n\n  msg.data.measurement = measurement._value\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 480,
    "y": 360,
    "wires": [["5ffdf6689566f66f", "89871191defce9a9"]]
  },
  {
    "id": "01a4fbb4885a579f",
    "type": "inject",
    "z": "d289ded41d25fe0f",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "measurement",
        "v": "co2_per_capita",
        "vt": "str"
      }
    ],
    "repeat": "259200",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 157,
    "y": 181,
    "wires": [["4c5ca42dfc8d2379"]]
  },
  {
    "id": "4c5ca42dfc8d2379",
    "type": "http request",
    "z": "d289ded41d25fe0f",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://raw.githubusercontent.com/klimadashboard/data/main/global/emissions/emissions_global.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 337,
    "y": 181,
    "wires": [["420b9df5ae702ea0"]]
  },
  {
    "id": "22daad352e0e0846",
    "type": "debug",
    "z": "d289ded41d25fe0f",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1317,
    "y": 181,
    "wires": []
  },
  {
    "id": "420b9df5ae702ea0",
    "type": "csv",
    "z": "d289ded41d25fe0f",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 497,
    "y": 181,
    "wires": [["cf47df1d13cc3ffa", "17730469f6811cdf"]]
  },
  {
    "id": "7f2d4ef3ca722430",
    "type": "influxdb batch",
    "z": "d289ded41d25fe0f",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "klimadashboardat",
    "x": 1377,
    "y": 241,
    "wires": []
  },
  {
    "id": "428029defddd41d9",
    "type": "function",
    "z": "d289ded41d25fe0f",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\n// Get the timestamp from a now\nconst timestamp = new Date().valueOf()\n\nconst s = {\n    fields: {\n        \"CN\": msg.payload.CN,\n        \"FR\": msg.payload.FR,\n        \"DE\": msg.payload.DE,\n        \"US\": msg.payload.US,\n        \"EU\": msg.payload.EU,\n        \"WORLD\": msg.payload.WORLD,\n        \n    },\n    tags: {\n    },\n    measurement,\n    timestamp\n}\ndata_to_return.push(s)\n\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1070,
    "y": 180,
    "wires": [["7f2d4ef3ca722430", "22daad352e0e0846", "7504ba03fe4376a9"]]
  },
  {
    "id": "cf47df1d13cc3ffa",
    "type": "function",
    "z": "d289ded41d25fe0f",
    "name": "",
    "func": "msg.payload = msg.payload.filter((row) => {\n    return row.state_iso === 'WORLD' || \n    row.state_iso === 'EU' ||\n    row.state_iso === 'CN' ||\n    row.state_iso === 'DE' ||\n    row.state_iso === 'FR' ||\n    row.state_iso === 'US';\n});\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 640,
    "y": 180,
    "wires": [["971f28421fe58c07"]]
  },
  {
    "id": "17730469f6811cdf",
    "type": "debug",
    "z": "d289ded41d25fe0f",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 610,
    "y": 100,
    "wires": []
  },
  {
    "id": "149703fbb00d3289",
    "type": "debug",
    "z": "d289ded41d25fe0f",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1030,
    "y": 80,
    "wires": []
  },
  {
    "id": "971f28421fe58c07",
    "type": "function",
    "z": "d289ded41d25fe0f",
    "name": "",
    "func": "function transformJSON(json) {\n    var result = {};\n\n    json.forEach((item) => {\n        result[item.state_iso] = item.co2_percapita;\n    });\n\n    return result;\n}\n\n\n\nmsg.payload = transformJSON(msg.payload);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 860,
    "y": 180,
    "wires": [["428029defddd41d9", "149703fbb00d3289"]]
  },
  {
    "id": "71d2f5d9472fbf22",
    "type": "catch",
    "z": "d289ded41d25fe0f",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 440,
    "wires": [["e237318497429813"]]
  },
  {
    "id": "d50ccc82637f68b4",
    "type": "influxdb batch",
    "z": "d289ded41d25fe0f",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 440,
    "wires": []
  },
  {
    "id": "e237318497429813",
    "type": "function",
    "z": "d289ded41d25fe0f",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"klimadashboardat\",\n    fields: {\n        bucket: \"klimadashboardat\",\n        flow: \"Klimadashboard.at\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 440,
    "wires": [["d50ccc82637f68b4", "748fa0ed90d04230"]]
  },
  {
    "id": "748fa0ed90d04230",
    "type": "debug",
    "z": "d289ded41d25fe0f",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 480,
    "wires": []
  },
  {
    "id": "5d1c0a4efc5b5bde",
    "type": "comment",
    "z": "d289ded41d25fe0f",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 400,
    "wires": []
  },
  {
    "id": "3ef51ce0abeb2b16",
    "type": "link out",
    "z": "d289ded41d25fe0f",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1415,
    "y": 440,
    "wires": []
  },
  {
    "id": "8606171692523ec8",
    "type": "comment",
    "z": "d289ded41d25fe0f",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1360,
    "y": 400,
    "wires": []
  },
  {
    "id": "7504ba03fe4376a9",
    "type": "function",
    "z": "d289ded41d25fe0f",
    "name": "",
    "func": "msg.bucket = \"klimadashboardat\"\nmsg.flow = \"Klimadashboard.at\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1320,
    "y": 440,
    "wires": [["3ef51ce0abeb2b16"]]
  },
  {
    "id": "36ebd19f39ca7006",
    "type": "mqtt in",
    "z": "cb2c713d4de88053",
    "name": "v3/pegelstand-belzig@ttn",
    "topic": "v3/pegelstand-belzig@ttn@ttn/devices/pegeltest1/#",
    "qos": "2",
    "datatype": "auto",
    "broker": "b5548ac68b9cabfc",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 55,
    "y": 180,
    "wires": [["30f2ee633ba6acba", "dfb6efe863095a83"]],
    "l": false
  },
  {
    "id": "30f2ee633ba6acba",
    "type": "change",
    "z": "cb2c713d4de88053",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload.uplink_message.decoded_payload",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 240,
    "y": 180,
    "wires": [["6a93c21ce4eaad01"]]
  },
  {
    "id": "6a93c21ce4eaad01",
    "type": "function",
    "z": "cb2c713d4de88053",
    "name": "convert to numbers",
    "func": "// convert strings to numbers\nmsg.payload.water_SOIL = msg.payload.water_SOIL * 1\nmsg.payload.temp_SOIL = msg.payload.temp_SOIL * 1\nmsg.payload.temp_DS18B20 = msg.payload.temp_DS18B20 * 1\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 510,
    "y": 180,
    "wires": [["3e847ffc099932e2", "a02776bb5fb26154", "c565388e9198d8cc"]]
  },
  {
    "id": "a02776bb5fb26154",
    "type": "influxdb out",
    "z": "cb2c713d4de88053",
    "influxdb": "d0ef26dd03a08b6b",
    "name": "Pegelstand Belzig",
    "measurement": "Pegelstand-Arensnest",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Pegelstand",
    "x": 750,
    "y": 180,
    "wires": []
  },
  {
    "id": "dfb6efe863095a83",
    "type": "debug",
    "z": "cb2c713d4de88053",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 190,
    "y": 120,
    "wires": []
  },
  {
    "id": "3e847ffc099932e2",
    "type": "debug",
    "z": "cb2c713d4de88053",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 710,
    "y": 100,
    "wires": []
  },
  {
    "id": "5762a13c24d9d719",
    "type": "catch",
    "z": "cb2c713d4de88053",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 100,
    "y": 360,
    "wires": [["9e889be1e6ad416d"]]
  },
  {
    "id": "a3be3449f11c794d",
    "type": "influxdb batch",
    "z": "cb2c713d4de88053",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 590,
    "y": 360,
    "wires": []
  },
  {
    "id": "9e889be1e6ad416d",
    "type": "function",
    "z": "cb2c713d4de88053",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Pegelstand\",\n    fields: {\n        bucket: \"Pegelstand\",\n        flow: \"Pegelstand\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 340,
    "y": 360,
    "wires": [["a3be3449f11c794d", "9ae5e3897105af5a"]]
  },
  {
    "id": "9ae5e3897105af5a",
    "type": "debug",
    "z": "cb2c713d4de88053",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 400,
    "wires": []
  },
  {
    "id": "a0acd22f73fe3e9c",
    "type": "comment",
    "z": "cb2c713d4de88053",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 120,
    "y": 320,
    "wires": []
  },
  {
    "id": "de484f9c2ee8e87f",
    "type": "link out",
    "z": "cb2c713d4de88053",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 975,
    "y": 380,
    "wires": []
  },
  {
    "id": "2388836660eeb6c0",
    "type": "comment",
    "z": "cb2c713d4de88053",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 920,
    "y": 340,
    "wires": []
  },
  {
    "id": "c565388e9198d8cc",
    "type": "function",
    "z": "cb2c713d4de88053",
    "name": "",
    "func": "msg.bucket = \"Pegelstand\"\nmsg.flow = \"Pegelstand\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 380,
    "wires": [["de484f9c2ee8e87f"]]
  },
  {
    "id": "c7dc08b40f032894",
    "type": "inject",
    "z": "a07113881d05f3cb",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "measurement",
        "v": "kumulative klimatische Wasserbilanz",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "08 01 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 60,
    "wires": [["a26ca34d8af1df0d"]]
  },
  {
    "id": "8ecd1c78745f6c53",
    "type": "function",
    "z": "a07113881d05f3cb",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\nlet timestamp = new Date(2021, 0, 1).valueOf()\n\n// transform data with adding measurement and timestamp\nmsg.payload.forEach((item, index) => {\n    const s = {\n        fields: {\n            \"nied\": item[\"nied\"],\n            \"niedMax\": item[\"niedMax\"],\n            \"niedMin\": item[\"niedMin\"],\n            \"niedVI66Max\": item[\"niedVI66Max\"],\n            \"niedVI66Min\": item[\"niedVI66Min\"]\n        },\n        tags: {\n            \"Ort\": \"Weitzgrund\"\n        },\n        measurement,\n        timestamp: timestamp + (index * 86400000)\n    }\n    data_to_return.push(s)\n})\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 630,
    "y": 140,
    "wires": [["21e29ce7e3d6cbe0", "921bd224ba5e3b5f", "1e937485c5936630"]]
  },
  {
    "id": "21e29ce7e3d6cbe0",
    "type": "debug",
    "z": "a07113881d05f3cb",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 870,
    "y": 80,
    "wires": []
  },
  {
    "id": "855a601166c934db",
    "type": "csv",
    "z": "a07113881d05f3cb",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "all",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 290,
    "y": 140,
    "wires": [["8ecd1c78745f6c53", "21e29ce7e3d6cbe0"]]
  },
  {
    "id": "921bd224ba5e3b5f",
    "type": "influxdb batch",
    "z": "a07113881d05f3cb",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Landesbetrieb-Forst-Brandenburg",
    "x": 880,
    "y": 200,
    "wires": []
  },
  {
    "id": "a26ca34d8af1df0d",
    "type": "http request",
    "z": "a07113881d05f3cb",
    "name": "Abfrage Forstseite",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "http://www.forstliche-umweltkontrolle-bb.de/downloads/klimadaten_lfe_weitzgrund_1686752095.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 330,
    "y": 60,
    "wires": [["94d29d79e24a7599"]]
  },
  {
    "id": "94d29d79e24a7599",
    "type": "function",
    "z": "a07113881d05f3cb",
    "name": "",
    "func": "msg.payload = msg.payload.split(',').join('.');\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 120,
    "y": 140,
    "wires": [["855a601166c934db"]]
  },
  {
    "id": "a64139f26f65396e",
    "type": "catch",
    "z": "a07113881d05f3cb",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 120,
    "y": 440,
    "wires": [["5eeee9829372901d"]]
  },
  {
    "id": "888325ed52ea8340",
    "type": "influxdb batch",
    "z": "a07113881d05f3cb",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 610,
    "y": 440,
    "wires": []
  },
  {
    "id": "5eeee9829372901d",
    "type": "function",
    "z": "a07113881d05f3cb",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Landesbetrieb-Forst-Brandenburg\",\n    fields: {\n        bucket: \"Landesbetrieb-Forst-Brandenburg\",\n        flow: \"Forst Brandenburg\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 440,
    "wires": [["888325ed52ea8340", "fc1784d4807bfd0a"]]
  },
  {
    "id": "fc1784d4807bfd0a",
    "type": "debug",
    "z": "a07113881d05f3cb",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 480,
    "wires": []
  },
  {
    "id": "0880a5a21e31dbda",
    "type": "comment",
    "z": "a07113881d05f3cb",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 140,
    "y": 400,
    "wires": []
  },
  {
    "id": "7eb2b627b1f55abb",
    "type": "link out",
    "z": "a07113881d05f3cb",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 965,
    "y": 360,
    "wires": []
  },
  {
    "id": "8d41453d6222ac96",
    "type": "comment",
    "z": "a07113881d05f3cb",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 910,
    "y": 320,
    "wires": []
  },
  {
    "id": "1e937485c5936630",
    "type": "function",
    "z": "a07113881d05f3cb",
    "name": "",
    "func": "msg.bucket = \"Landesbetrieb-Forst-Brandenburg\"\nmsg.flow = \"Forst Brandenburg\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 870,
    "y": 360,
    "wires": [["7eb2b627b1f55abb"]]
  },
  {
    "id": "bc5c8e7b89800899",
    "type": "inject",
    "z": "716bc332ba89f052",
    "name": "timestamp",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 60,
    "wires": [["c5cb5d65509d9af6"]]
  },
  {
    "id": "d78cc8065196b307",
    "type": "debug",
    "z": "716bc332ba89f052",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 790,
    "y": 140,
    "wires": []
  },
  {
    "id": "c5cb5d65509d9af6",
    "type": "http request",
    "z": "716bc332ba89f052",
    "name": "get information from all sensores",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://data.sensor.community/airrohr/v1/filter/box=52.371483,11.518359,51.954793525119456,13.028238446352097",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 420,
    "y": 60,
    "wires": [["53e0f27ebce4618a", "620492a25bfa71b7"]]
  },
  {
    "id": "ee947623dc79ccda",
    "type": "function",
    "z": "716bc332ba89f052",
    "name": "change the answer",
    "func": "const response = msg.payload\n\nif (response?.sensor) {\n    const dateString = response.timestamp;\n    const timestamp = new Date(dateString).getTime();\n\n    const s = {\n        measurement: \"sensor-data\",\n        fields: {\n        },\n        tags: {\n            location_id: response.location.id,\n            sensor_id: response.sensor.id,\n            sensor_pin: response.sensor.pin,\n            sensor_type_manufacturer: response.sensor.sensor_type.manufacturer,\n            sensor_type_name: response.sensor.sensor_type.name,\n            sensor_type_id: response.sensor.sensor_type.id,\n            longitude: parseFloat(response.location.longitude),\n            latitude: parseFloat(response.location.latitude),\n            altitude: parseFloat(response.location.altitude),\n            indoor: response.location.indoor,\n            exact_location: response.location.exact_location,\n            country: response.location.country\n        },\n        timestamp\n    }\n\n    response.sensordatavalues.forEach((item) => {\n        s.fields[item.value_type] = parseFloat(item.value)\n    });\n\n    msg.payload = [s];\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 140,
    "wires": [["d78cc8065196b307", "f0984c078fc2e63b", "d6ee88a025fcc0e5"]]
  },
  {
    "id": "f0984c078fc2e63b",
    "type": "influxdb batch",
    "z": "716bc332ba89f052",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "sensor-community",
    "x": 830,
    "y": 220,
    "wires": []
  },
  {
    "id": "53e0f27ebce4618a",
    "type": "split",
    "z": "716bc332ba89f052",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 130,
    "y": 140,
    "wires": [["ee947623dc79ccda"]]
  },
  {
    "id": "620492a25bfa71b7",
    "type": "debug",
    "z": "716bc332ba89f052",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 790,
    "y": 60,
    "wires": []
  },
  {
    "id": "8c9ab03f93ad075a",
    "type": "catch",
    "z": "716bc332ba89f052",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 120,
    "y": 520,
    "wires": [["b196819c0b22e00a"]]
  },
  {
    "id": "cfa924c331e1a2ef",
    "type": "influxdb batch",
    "z": "716bc332ba89f052",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 610,
    "y": 520,
    "wires": []
  },
  {
    "id": "b196819c0b22e00a",
    "type": "function",
    "z": "716bc332ba89f052",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"sensor-community\",\n    fields: {\n        bucket: \"sensor-community\",\n        flow: \"Sensor Community\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 520,
    "wires": [["cfa924c331e1a2ef", "1f752d4fa2bcf687"]]
  },
  {
    "id": "1f752d4fa2bcf687",
    "type": "debug",
    "z": "716bc332ba89f052",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 560,
    "wires": []
  },
  {
    "id": "d9e1f29b03541fa4",
    "type": "comment",
    "z": "716bc332ba89f052",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 140,
    "y": 480,
    "wires": []
  },
  {
    "id": "719af47c1639c365",
    "type": "link out",
    "z": "716bc332ba89f052",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 875,
    "y": 380,
    "wires": []
  },
  {
    "id": "9525ec26a165bef4",
    "type": "comment",
    "z": "716bc332ba89f052",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 820,
    "y": 340,
    "wires": []
  },
  {
    "id": "d6ee88a025fcc0e5",
    "type": "function",
    "z": "716bc332ba89f052",
    "name": "",
    "func": "msg.bucket = \"sensor-community\"\nmsg.flow = \"Sensor Community\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 780,
    "y": 380,
    "wires": [["719af47c1639c365"]]
  },
  {
    "id": "a779df40ff8be530",
    "type": "inject",
    "z": "84615457a8c44f90",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "result",
        "v": "{}",
        "vt": "json"
      },
      {
        "p": "measurement",
        "v": "phaenologie",
        "vt": "str"
      }
    ],
    "repeat": "259200",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 60,
    "wires": [["2db0c53921983d5f"]]
  },
  {
    "id": "2db0c53921983d5f",
    "type": "http request",
    "z": "84615457a8c44f90",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://opendata.dwd.de/climate_environment/CDC/observations_germany/phenology/annual_reporters/wild/historical/PH_Jahresmelder_Wildwachsende_Pflanze_Schneegloeckchen_1925_2021_hist.txt",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 310,
    "y": 60,
    "wires": [["e1f003f9e37dddd9"]]
  },
  {
    "id": "2746c6f703f76098",
    "type": "debug",
    "z": "84615457a8c44f90",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1310,
    "y": 60,
    "wires": []
  },
  {
    "id": "e1f003f9e37dddd9",
    "type": "csv",
    "z": "84615457a8c44f90",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 490,
    "y": 60,
    "wires": [["17273170eb7caf92"]]
  },
  {
    "id": "17273170eb7caf92",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "",
    "func": "msg.payload = msg.payload.filter((row) => row.Stations_id === 5546);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 640,
    "y": 60,
    "wires": [["0fb5216e74bbf888"]]
  },
  {
    "id": "0fb5216e74bbf888",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "",
    "func": "// Funktion zur Berechnung des Mittelwerts\nfunction calculateMean(values) {\n    const sum = values.reduce((acc, value) => acc + value, 0);\n    return sum / values.length;\n}\n\n// JSON-Daten als Array\nconst jsonData = msg.payload;\n\n// Arrays für Jultagswerte der ersten 20 Jahre und der letzten 20 Jahre\nconst jultagsFirst20Years = [];\nconst jultagsLast20Years = [];\n\n// Ermittlung der ersten 20 Jahre und der letzten 20 Jahre\nconst minYear = Math.min(...jsonData.map(entry => entry.Referenzjahr));\nconst maxYear = Math.max(...jsonData.map(entry => entry.Referenzjahr));\nconst first20YearsStart = minYear;\nconst first20YearsEnd = first20YearsStart + 19;\nconst last20YearsEnd = maxYear;\nconst last20YearsStart = last20YearsEnd - 19;\n\n// Filtern der Jultagswerte für die ersten 20 Jahre und die letzten 20 Jahre\nfor (let i = 0; i < jsonData.length; i++) {\n    const referenzjahr = jsonData[i].Referenzjahr;\n    const jultag = jsonData[i].Jultag;\n\n    if (referenzjahr >= first20YearsStart && referenzjahr <= first20YearsEnd) {\n        jultagsFirst20Years.push(jultag);\n    } else if (referenzjahr >= last20YearsStart && referenzjahr <= last20YearsEnd) {\n        jultagsLast20Years.push(jultag);\n    }\n}\n\n// Berechnung der Mittelwerte\nconst meanFirst20Years = calculateMean(jultagsFirst20Years);\nconst meanLast20Years = calculateMean(jultagsLast20Years);\n\n// Berechnung der Differenz\nconst diffMean = meanLast20Years - meanFirst20Years;\n\n// Ausgabe der Ergebnisse\n// console.log('Mittelwert der Jultage (', first20YearsStart, '-', first20YearsEnd, '):', meanFirst20Years);\n// console.log('Mittelwert der Jultage (', last20YearsStart, '-', last20YearsEnd, '):', meanLast20Years);\n// console.log('Differenz der Mittelwerte:', diffMean);\n\nmsg.result.lastYear = maxYear;\nmsg.result.differenz = diffMean;\n\n\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 820,
    "y": 60,
    "wires": [["a9d8606eed81d052"]]
  },
  {
    "id": "615e0838adb7a569",
    "type": "influxdb batch",
    "z": "84615457a8c44f90",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "DWD",
    "x": 1340,
    "y": 120,
    "wires": []
  },
  {
    "id": "a9d8606eed81d052",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\nconst year = msg.result.lastYear\n\n// Get the timestamp from a new Date object with the year\nconst timestamp = new Date(year, 11, 31).valueOf()\n\nconst s = {\n    fields: {\n        \"Differenz\": msg.result.differenz,\n    },\n    tags: {\n        \"Pflanze\": \"Schneeglöckchen\"\n    },\n    measurement,\n    timestamp\n}\ndata_to_return.push(s)\n\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1070,
    "y": 60,
    "wires": [["615e0838adb7a569", "2746c6f703f76098", "30bbcf47528ed7bf"]]
  },
  {
    "id": "55702f3df5c4372b",
    "type": "inject",
    "z": "84615457a8c44f90",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "result",
        "v": "{}",
        "vt": "json"
      },
      {
        "p": "measurement",
        "v": "phaenologie",
        "vt": "str"
      }
    ],
    "repeat": "255600",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 340,
    "wires": [["c8ead0c39973e8da"]]
  },
  {
    "id": "c8ead0c39973e8da",
    "type": "http request",
    "z": "84615457a8c44f90",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://opendata.dwd.de/climate_environment/CDC/observations_germany/phenology/annual_reporters/wild/historical/PH_Jahresmelder_Wildwachsende_Pflanze_Wiesen-Knaeuelgras_1936_2021_hist.txt",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 310,
    "y": 340,
    "wires": [["e57b2bb46871b10d"]]
  },
  {
    "id": "ab7275fc39ea4d95",
    "type": "inject",
    "z": "84615457a8c44f90",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "result",
        "v": "{}",
        "vt": "json"
      },
      {
        "p": "measurement",
        "v": "phaenologie",
        "vt": "str"
      }
    ],
    "repeat": "262800",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 600,
    "wires": [["977445d09246c1dd"]]
  },
  {
    "id": "977445d09246c1dd",
    "type": "http request",
    "z": "84615457a8c44f90",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://opendata.dwd.de/climate_environment/CDC/observations_germany/phenology/annual_reporters/wild/historical/PH_Jahresmelder_Wildwachsende_Pflanze_Hasel_1930_2021_hist.txt",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 310,
    "y": 600,
    "wires": [["a3e3da435cf246bb"]]
  },
  {
    "id": "5f7626d40dc0b3ee",
    "type": "debug",
    "z": "84615457a8c44f90",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1310,
    "y": 340,
    "wires": []
  },
  {
    "id": "e57b2bb46871b10d",
    "type": "csv",
    "z": "84615457a8c44f90",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 490,
    "y": 340,
    "wires": [["1cc661962e8b22ee"]]
  },
  {
    "id": "1cc661962e8b22ee",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "",
    "func": "msg.payload = msg.payload.filter((row) => row.Stations_id === 5546);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 640,
    "y": 340,
    "wires": [["bdbe2b841daee8bf", "738b359c3e11a831"]]
  },
  {
    "id": "bdbe2b841daee8bf",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "",
    "func": "// Funktion zur Berechnung des Mittelwerts\nfunction calculateMean(values) {\n    const sum = values.reduce((acc, value) => acc + value, 0);\n    return sum / values.length;\n}\n\n// JSON-Daten als Array\nconst jsonData = msg.payload;\n\n// Arrays für Jultagswerte der ersten 20 Jahre und der letzten 20 Jahre\nconst jultagsFirst20Years = [];\nconst jultagsLast20Years = [];\n\n// Ermittlung der ersten 20 Jahre und der letzten 20 Jahre\nconst minYear = Math.min(...jsonData.map(entry => entry.Referenzjahr));\nconst maxYear = Math.max(...jsonData.map(entry => entry.Referenzjahr));\nconst first20YearsStart = minYear;\nconst first20YearsEnd = first20YearsStart + 19;\nconst last20YearsEnd = maxYear;\nconst last20YearsStart = last20YearsEnd - 19;\n\n// Filtern der Jultagswerte für die ersten 20 Jahre und die letzten 20 Jahre\nfor (let i = 0; i < jsonData.length; i++) {\n    const referenzjahr = jsonData[i].Referenzjahr;\n    const jultag = jsonData[i].Jultag;\n\n    if (referenzjahr >= first20YearsStart && referenzjahr <= first20YearsEnd) {\n        jultagsFirst20Years.push(jultag);\n    } else if (referenzjahr >= last20YearsStart && referenzjahr <= last20YearsEnd) {\n        jultagsLast20Years.push(jultag);\n    }\n}\n\n// Berechnung der Mittelwerte\nconst meanFirst20Years = calculateMean(jultagsFirst20Years);\nconst meanLast20Years = calculateMean(jultagsLast20Years);\n\n// Berechnung der Differenz\nconst diffMean = meanLast20Years - meanFirst20Years;\n\n// Ausgabe der Ergebnisse\n// console.log('Mittelwert der Jultage (', first20YearsStart, '-', first20YearsEnd, '):', meanFirst20Years);\n// console.log('Mittelwert der Jultage (', last20YearsStart, '-', last20YearsEnd, '):', meanLast20Years);\n// console.log('Differenz der Mittelwerte:', diffMean);\n\nmsg.result.lastYear = maxYear;\nmsg.result.differenz = diffMean;\n\n\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 820,
    "y": 340,
    "wires": [["cff0a5e01059dc74"]]
  },
  {
    "id": "a00dd065d7c16df2",
    "type": "influxdb batch",
    "z": "84615457a8c44f90",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "DWD",
    "x": 1340,
    "y": 400,
    "wires": []
  },
  {
    "id": "cff0a5e01059dc74",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\nconst year = msg.result.lastYear\n\n// Get the timestamp from a new Date object with the year\nconst timestamp = new Date(year, 11, 31).valueOf()\n\nconst s = {\n    fields: {\n        \"Differenz\": msg.result.differenz,\n    },\n    tags: {\n        \"Pflanze\": \"Wieselknaulgras\"\n    },\n    measurement,\n    timestamp\n}\ndata_to_return.push(s)\n\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1070,
    "y": 340,
    "wires": [["a00dd065d7c16df2", "5f7626d40dc0b3ee", "30bbcf47528ed7bf"]]
  },
  {
    "id": "19ebec3dd7965745",
    "type": "debug",
    "z": "84615457a8c44f90",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1310,
    "y": 600,
    "wires": []
  },
  {
    "id": "a3e3da435cf246bb",
    "type": "csv",
    "z": "84615457a8c44f90",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 490,
    "y": 600,
    "wires": [["a0f8043893de7b98"]]
  },
  {
    "id": "a0f8043893de7b98",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "",
    "func": "msg.payload = msg.payload.filter((row) => row.Stations_id === 5546);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 640,
    "y": 600,
    "wires": [["34a94fed3236caf8", "27eeb7ae9ac8e060"]]
  },
  {
    "id": "34a94fed3236caf8",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "",
    "func": "// Funktion zur Berechnung des Mittelwerts\nfunction calculateMean(values) {\n    const sum = values.reduce((acc, value) => acc + value, 0);\n    return sum / values.length;\n}\n\n// JSON-Daten als Array\nconst jsonData = msg.payload;\n\n// Arrays für Jultagswerte der ersten 20 Jahre und der letzten 20 Jahre\nconst jultagsFirst20Years = [];\nconst jultagsLast20Years = [];\n\n// Ermittlung der ersten 20 Jahre und der letzten 20 Jahre\nconst minYear = Math.min(...jsonData.map(entry => entry.Referenzjahr));\nconst maxYear = Math.max(...jsonData.map(entry => entry.Referenzjahr));\nconst first20YearsStart = minYear;\nconst first20YearsEnd = first20YearsStart + 19;\nconst last20YearsEnd = maxYear;\nconst last20YearsStart = last20YearsEnd - 19;\n\n// Filtern der Jultagswerte für die ersten 20 Jahre und die letzten 20 Jahre\nfor (let i = 0; i < jsonData.length; i++) {\n    const referenzjahr = jsonData[i].Referenzjahr;\n    const jultag = jsonData[i].Jultag;\n\n    if (referenzjahr >= first20YearsStart && referenzjahr <= first20YearsEnd) {\n        jultagsFirst20Years.push(jultag);\n    } else if (referenzjahr >= last20YearsStart && referenzjahr <= last20YearsEnd) {\n        jultagsLast20Years.push(jultag);\n    }\n}\n\n// Berechnung der Mittelwerte\nconst meanFirst20Years = calculateMean(jultagsFirst20Years);\nconst meanLast20Years = calculateMean(jultagsLast20Years);\n\n// Berechnung der Differenz\nconst diffMean = meanLast20Years - meanFirst20Years;\n\n// Ausgabe der Ergebnisse\n// console.log('Mittelwert der Jultage (', first20YearsStart, '-', first20YearsEnd, '):', meanFirst20Years);\n// console.log('Mittelwert der Jultage (', last20YearsStart, '-', last20YearsEnd, '):', meanLast20Years);\n// console.log('Differenz der Mittelwerte:', diffMean);\n\nmsg.result.lastYear = maxYear;\nmsg.result.differenz = diffMean;\n\n\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 820,
    "y": 600,
    "wires": [["42c94ce2c323ddb1"]]
  },
  {
    "id": "729e82741a42c661",
    "type": "influxdb batch",
    "z": "84615457a8c44f90",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "DWD",
    "x": 1340,
    "y": 660,
    "wires": []
  },
  {
    "id": "42c94ce2c323ddb1",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "Daten bearbeiten",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\nconst year = msg.result.lastYear\n\n// Get the timestamp from a new Date object with the year\nconst timestamp = new Date(year, 11, 31).valueOf()\n\nconst s = {\n    fields: {\n        \"Differenz\": msg.result.differenz,\n    },\n    tags: {\n        \"Pflanze\": \"Hasel\"\n    },\n    measurement,\n    timestamp\n}\ndata_to_return.push(s)\n\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1070,
    "y": 600,
    "wires": [["729e82741a42c661", "19ebec3dd7965745", "30bbcf47528ed7bf"]]
  },
  {
    "id": "738b359c3e11a831",
    "type": "debug",
    "z": "84615457a8c44f90",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 830,
    "y": 260,
    "wires": []
  },
  {
    "id": "27eeb7ae9ac8e060",
    "type": "debug",
    "z": "84615457a8c44f90",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 810,
    "y": 540,
    "wires": []
  },
  {
    "id": "e44eb72d5e664b19",
    "type": "catch",
    "z": "84615457a8c44f90",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 120,
    "y": 840,
    "wires": [["b51562752d706b19"]]
  },
  {
    "id": "ed06659d03ed9a5e",
    "type": "influxdb batch",
    "z": "84615457a8c44f90",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 610,
    "y": 840,
    "wires": []
  },
  {
    "id": "b51562752d706b19",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"DWD\",\n    fields: {\n        bucket: \"DWD\",\n        flow: \"DWD Phänologie\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 840,
    "wires": [["ed06659d03ed9a5e", "4cef8214706e0530"]]
  },
  {
    "id": "4cef8214706e0530",
    "type": "debug",
    "z": "84615457a8c44f90",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 880,
    "wires": []
  },
  {
    "id": "94aaf809c3d19bf2",
    "type": "comment",
    "z": "84615457a8c44f90",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 140,
    "y": 800,
    "wires": []
  },
  {
    "id": "7ca555fa3ddcfd48",
    "type": "link out",
    "z": "84615457a8c44f90",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1425,
    "y": 840,
    "wires": []
  },
  {
    "id": "a6eab2a380df0163",
    "type": "comment",
    "z": "84615457a8c44f90",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1370,
    "y": 800,
    "wires": []
  },
  {
    "id": "30bbcf47528ed7bf",
    "type": "function",
    "z": "84615457a8c44f90",
    "name": "",
    "func": "msg.bucket = \"DWD\"\nmsg.flow = \"DWD Phänologie\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1330,
    "y": 840,
    "wires": [["7ca555fa3ddcfd48"]]
  },
  {
    "id": "e45698d47cc95798",
    "type": "influxdb batch",
    "z": "0e4f8ac41740aed5",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "send to influxdb",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Statistik-Berlin-Brandenburg",
    "x": 1020,
    "y": 320,
    "wires": []
  },
  {
    "id": "ecfc59be679b9b0a",
    "type": "link out",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "mode": "link",
    "links": ["fb6d2ec4112d1910"],
    "x": 1075,
    "y": 500,
    "wires": []
  },
  {
    "id": "0b104325dae70928",
    "type": "function",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "func": "msg.bucket = \"Statistik-Berlin-Brandenburg\"\nmsg.flow = \"Statistik Berlin-Brandenburg\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 980,
    "y": 500,
    "wires": [["ecfc59be679b9b0a"]]
  },
  {
    "id": "e94ad44ccffde064",
    "type": "http request",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://github.com/Klima-Dashboard/data/raw/main/Statistik%20Berlin-Brandenburg/{{filename}}.csv",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "x": 430,
    "y": 260,
    "wires": [["c28454d6e9be3051"]]
  },
  {
    "id": "c28454d6e9be3051",
    "type": "csv",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 630,
    "y": 260,
    "wires": [["9027b1490940a51f"]]
  },
  {
    "id": "69133193dc704553",
    "type": "debug",
    "z": "0e4f8ac41740aed5",
    "name": "debug",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 990,
    "y": 200,
    "wires": []
  },
  {
    "id": "9027b1490940a51f",
    "type": "function",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "func": "const data_to_return = []\nconst measurement = msg.measurement\n\n// transform data with adding measurement and timestamp\nmsg.payload.forEach(item => {\n    const year = item.year\n\n    // Get the timestamp from a new Date object with the year\n    const timestamp = new Date(year, 0, 1).valueOf()\n\n    const value = item.value\n\n    const s = {\n        fields: {\n            \"Anzahl der Betriebe\": value\n        },\n        tags: {\n            \"title\": \"Landwirtschaftliche Betriebe in Brandenburg\"\n        },\n        measurement,\n        timestamp\n    }\n    data_to_return.push(s)\n})\n\n// make transformed data the payload\nmsg.payload = data_to_return\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 260,
    "wires": [["69133193dc704553", "e45698d47cc95798", "0b104325dae70928"]]
  },
  {
    "id": "e219da90302ae4b0",
    "type": "http in",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "url": "/api/v1/import/statistik-berlin-brandenburg",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 240,
    "y": 60,
    "wires": [["450f60a227768928", "38cb6102b95cacf6", "eff88450690f05bb"]]
  },
  {
    "id": "105ca40a17985934",
    "type": "array-loop",
    "z": "0e4f8ac41740aed5",
    "name": "loop über filenames",
    "key": "filenames_index",
    "keyType": "msg",
    "reset": true,
    "resetValue": "value-null",
    "array": "filenames",
    "arrayType": "msg",
    "x": 190,
    "y": 200,
    "wires": [["2146da7dab8bf113"], ["aa1c218526b38dde"]]
  },
  {
    "id": "450f60a227768928",
    "type": "debug",
    "z": "0e4f8ac41740aed5",
    "name": "api",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 60,
    "wires": []
  },
  {
    "id": "7a2ba9618b97cbf4",
    "type": "debug",
    "z": "0e4f8ac41740aed5",
    "name": "file",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 320,
    "wires": []
  },
  {
    "id": "aa1c218526b38dde",
    "type": "function",
    "z": "0e4f8ac41740aed5",
    "name": "measurement & filename",
    "func": "msg.measurement = \"Betriebe\"\nmsg.filename = msg.payload\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 190,
    "y": 280,
    "wires": [["e94ad44ccffde064", "105ca40a17985934", "7a2ba9618b97cbf4"]]
  },
  {
    "id": "38cb6102b95cacf6",
    "type": "http response",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "statusCode": "200",
    "headers": {},
    "x": 540,
    "y": 120,
    "wires": []
  },
  {
    "id": "eff88450690f05bb",
    "type": "function",
    "z": "0e4f8ac41740aed5",
    "name": "filenames",
    "func": "msg.filenames = msg.payload.filenames;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 160,
    "y": 120,
    "wires": [["105ca40a17985934"]]
  },
  {
    "id": "2146da7dab8bf113",
    "type": "debug",
    "z": "0e4f8ac41740aed5",
    "name": "ende",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 410,
    "y": 180,
    "wires": []
  },
  {
    "id": "ab54e59216130b5d",
    "type": "catch",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "scope": null,
    "uncaught": false,
    "x": 140,
    "y": 500,
    "wires": [["92734122d267c90c"]]
  },
  {
    "id": "38eb3eb9b5edd337",
    "type": "influxdb batch",
    "z": "0e4f8ac41740aed5",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Fehler-Monitoring",
    "x": 630,
    "y": 500,
    "wires": []
  },
  {
    "id": "92734122d267c90c",
    "type": "function",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "func": "msg.payload = [{\n    measurement: \"Statistik-Berlin-Brandenburg\",\n    fields: {\n        bucket: \"Statistik-Berlin-Brandenburg\",\n        flow: \"Statistik Berlin-Brandenburg\",\n        error_message: msg.error.message,\n        response_url: msg.responseUrl,\n        status_code: isNaN(Number(msg?.statusCode)) ? 0 : Number(msg.statusCode)\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 500,
    "wires": [["38eb3eb9b5edd337", "b44c2a83a8dfc99a"]]
  },
  {
    "id": "b44c2a83a8dfc99a",
    "type": "debug",
    "z": "0e4f8ac41740aed5",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 570,
    "y": 540,
    "wires": []
  },
  {
    "id": "2da2d9bf77034e6b",
    "type": "comment",
    "z": "0e4f8ac41740aed5",
    "name": "Fehler-Monitoring",
    "info": "",
    "x": 160,
    "y": 460,
    "wires": []
  },
  {
    "id": "c55e411f95063715",
    "type": "comment",
    "z": "0e4f8ac41740aed5",
    "name": "Heartbeat-Monitoring",
    "info": "",
    "x": 1020,
    "y": 460,
    "wires": []
  },
  {
    "id": "4e71e5bb9208e753",
    "type": "influxdb batch",
    "z": "f7c51ad7e86d6764",
    "influxdb": "af4e5c9d85dc4b89",
    "precision": "",
    "retentionPolicy": "",
    "name": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "smart-village",
    "bucket": "Heartbeat-Monitoring",
    "x": 490,
    "y": 100,
    "wires": []
  },
  {
    "id": "5126c94fd5cb5d9d",
    "type": "function",
    "z": "f7c51ad7e86d6764",
    "name": "",
    "func": "msg.payload = [{\n    measurement: msg.bucket,\n    fields: {\n        bucket: msg.bucket,\n        flow: msg.flow,\n        heartbeat: 1,\n        response_url: msg.responseUrl,\n        status_code: msg.statusCode\n    },\n    tags: {\n    },\n    timestamp: new Date().valueOf()\n}];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 240,
    "y": 100,
    "wires": [["74007e98580ec493", "4e71e5bb9208e753"]]
  },
  {
    "id": "74007e98580ec493",
    "type": "debug",
    "z": "f7c51ad7e86d6764",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 430,
    "y": 140,
    "wires": []
  },
  {
    "id": "84f731857df2a070",
    "type": "comment",
    "z": "f7c51ad7e86d6764",
    "name": "Heartbeat-Monitoring, welche Prozesse wann laufen",
    "info": "",
    "x": 270,
    "y": 60,
    "wires": []
  },
  {
    "id": "fb6d2ec4112d1910",
    "type": "link in",
    "z": "f7c51ad7e86d6764",
    "name": "",
    "links": [
      "3ef51ce0abeb2b16",
      "34b5c64f6978e80b",
      "19248a28b8954a5b",
      "7ca555fa3ddcfd48",
      "719af47c1639c365",
      "7eb2b627b1f55abb",
      "de484f9c2ee8e87f",
      "a4c63f4cf13e8dc7",
      "309a77bc79bad5b2",
      "371819510449cfbc",
      "d9ee333b99ab08fe",
      "e3d8041df4cfc7cb",
      "74cb08ce216ddcb1",
      "4fa2cc2a37baa34f",
      "2f159e03d538a82c",
      "346ec3fe95625ba9",
      "ca9199a3c778417b",
      "4ebf75ce5a8ca1f6",
      "d88a7332b69d7eeb",
      "ca5383eac6b7b4ad",
      "d9f368cbba60f09e",
      "e906b7f1f301d786",
      "e2c31da5727ee007",
      "d550b516aa83f54c",
      "df24f1f3d8fe4069",
      "3d74a1b14cc97298",
      "7f61b2561eb867c1",
      "ecfc59be679b9b0a",
      "c6143118b4413126",
      "f70ad40aa3a40e16",
      "812a161a7d5e60d3",
      "6a501e8f182de8ba"
    ],
    "x": 95,
    "y": 100,
    "wires": [["5126c94fd5cb5d9d"]]
  }
]
